#!/usr/bin/env python
"""CMS TagCollector command-line tool. Feedback and Help: mojedasa@cern.ch

Available commands:
   tags, diff, difflast, tagset, search, pendingappr, ibs, lastib, pkghist,
   comment, sign, signall, rejectsign, approve, bypass, rejectappr, remove,
   pendingpkgs, approvepkgs, cmsdisttags, cmsdistdiff, createrel, requestcib,
   relarch, tagsappr, tagssign

Common commands:
   tags         Prints all tags of up to 4 releases.
   diff         Same, but only tags that differ.
 ^ difflast     Same, but only print tags of the last release given.
                (useful for executing 'addpkg -f' later on).

   tagset       Prints the tags of one tagset, given its ID.
   tagsetinfo   Prints the information of one tagset, given its ID.
                Includes the tags as well.

 * search       Searches for releases, packages, tagsets, users and categories
                and prints anything that matches.
                Searching for users includes the full names and emails.
                Returns at most 10 results per type of result
                (e.g. 10 releases + 10 packages + ...).
                
 ^ tagssign     Prints Pending Signature tags of one or more releases.
                Type `cmstc tagssign --help` for usage information

 ^ tagsappr     Prints Pending Approval tags of one or more releases,
                one or more tagsets, or both (i.e. it joins all the tags).
                Prints an error if several tags appear for a single package
                if the '-m' flag is not specified.
                Suitable for piping to addpkg (note: at the moment,
                addpkg does not read from stdin, use "-f" instead).
                Optional parameter: '-m' ('--multiple').
                Allows multiple tags for a single package.
                   
   createrel    Creates a new release queue. The command is using mandatory
                switches. Type 'cmstc createrel --help' for more information
                regarding the command's switches
   
   requestcib   Requests a new Custom IB for the specified architectures and tags.
                Type 'cmstc requestcib --help' for more information regarding the
                command's switches
   
   relarch      Outputs release architectures. The command can take one parameter - 
                release name to see all the available architectures or two parameters - 
                the release name and filter either 'prod' or 'dev' to see all the 
                production or development architectures respectively

Integration Build commands:
   ibs          Prints the list of latest IBs for active releases
                with creation timestamps, time ordered.
                Optional parameter: Filter.
   lastib       Prints the last IB given a filter.
                Note: Only IBs for active releases are returned.

Miscellaneous commands:
 ^ pkghist      Prints the recent history of a package, i.e.:
                   * Prints recent CVS tags.
                   * Prints the first line of the description of the tag
                     if it was published in TagCollector.
                   * Prints the releases where the tag is, if any.

Tagset commands:
   > Common commands:
 * comment      Comment one or more tagsets.
                Mandatory parameter: '-c' ('--comment').

   > Pending Signatures queue commands:
 * sign         Sign one or more tagsets, for L2s.
                Optional parameter: '-c' ('--comment').
 * signall      Sign all signatures of one or more tagsets,
                for top-level admins.
                Optional parameter: '-c' ('--comment').
 * rejectsign   Reject one or more tagsets from the Pending Signatures queue,
                for L2s, Release Managers or authors of the tagsets.
                Optional parameter: '-c' ('--comment').

   > Pending Approval queue commands:
 * approve      Approve one or more tagsets, for Release Managers.
                Optional parameter: '-c' ('--comment').
 * bypass       Same, but bypass (i.e. skip signatures), for Release Managers.
                Optional parameter: '-c' ('--comment').
 * rejectappr   Reject one or more tagsets from the Pending Approval queue,
                for Release Managers.
                Optional parameter: '-c' ('--comment').

   > History (i.e. stack of the release) commands:
 * remove       Remove one or more tagsets, for Release Managers.
                Optional parameter: '-c' ('--comment').

New Package Request commands:
   pendingpkgs  Prints the list of packages pending approval in TC.
                Optional parameter: '-v' ('--verbose').
 * approvepkgs  Approves packages in TC and **creates them in CVS**.

CMSDIST (i.e. externals) commands:
   cmsdisttags  Prints all CMSDIST's tags of up to 4 CVS tags.
   cmsdistdiff  Same, but only tags that differ.

--

Commands that require signing in are marked with *.

Experimental commands are marked with ^ (i.e. their output/name/arguments may
change in the future with high probability, feedback is welcomed).

If you want to create scripts based on the output of this script,
please consider using the cmstc.py Python API directly instead.

Examples:
   cmstc tags          CMSSW_4_1_X
   cmstc tags          CMSSW_4_1_2 CMSSW_4_1_X
   cmstc diff          CMSSW_4_1_2 CMSSW_4_1_X
   cmstc diff          CMSSW_4_1_X CMSSW_4_2_X CMSSW_4_3_X
   cmstc difflast      CMSSW_4_1_2 CMSSW_4_1_X

   cmstc tagset        12345
   cmstc tagsetinfo    98765

   cmstc search        4_4
   cmstc search        align
   cmstc search        2011-01-01
   cmstc search        miguel

   cmstc tagssign
   cmstc tagssign      CMSSW_5_0_X 
   cmstc tagssign      CMSSW_5_0_X CMSSW_4_4_X
   cmstc tagssign      -u vskarupe
   cmstc tagssign      CMSSW_5_0_X CMSSW_4_4_X -u vskarupe --author
   cmstc tagssign      --all
   

   cmstc tagsappr      CMSSW_4_1_X
   cmstc tagsappr      12345 98765
   cmstc tagsappr      CMSSW_4_1_X 12345 98765

   cmstc ibs
   cmstc ibs           4_2
   cmstc lastib        4_2

   cmstc pkghist       DQM/BeamMonitor

   cmstc sign          12345 98765
   cmstc approve       -c "this is the comment" 12345 98765
   cmstc bypass        12345
   cmstc ...

   cmstc pendingpkgs
   cmstc pendingpkgs   -v
   cmstc approvepkgs   TESTSubSystem/TestPackage9 TESTSubSystem/TestPackage10

   cmstc cmsdisttags   CMSSW_4_1_0_pre1
   cmstc cmsdistdiff   CMSSW_4_1_0_pre1 CMSSW_4_1_0_pre2
   
   cmstc createrel     -r CMSSW_5_0_0_pre2 --private -b CMSSW_5_0_0_pre1 -d "adding new release queue" -a "CalibCalorimetry/CaloMiscalibTools V00-02-23, DQM/BeamMonitor V00-04-25" -m "muzaffar,eulisse"
   
   cmstc relarch       CMSSW_5_2_X
   cmstc relarch       CMSSW_5_2_X prod
   
   cmstc requestcib    -r CMSSW_5_0_X -t "CalibCalorimetry/CaloMiscalibTools V00-02-23, DQM/BeamMonitor V00-04-25" -a "slc5_amd64_gcc434,slc5_amd64_gcc451"
   
"""

__author__ = "Miguel Ojeda"
__copyright__ = "Copyright 2010-2011, CERN CMS"
__credits__ = ["Miguel Ojeda"]
__license__ = "Unknown"
__maintainer__ = "Miguel Ojeda"
__email__ = "mojedasa@cern.ch"
__status__ = "Staging"

import cmstc
import sys
import optparse
import subprocess
import re
import getpass
from optparse import OptionParser

tc = cmstc.TagCollector(True)
def _system(args):
  print "Running:", ' '.join(args)
  subprocess.check_call(args)

def _popen(args):
  p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
  r = p.communicate()[0]
  if p.returncode != 0:
    raise subprocess.CalledProcessError(p.returncode, ' '.join(args))
  return r

def _createCVSPackage(package, admins, developers):
  admins = ','.join(admins)
  developers = ','.join(developers)
  return _system(['CreateCVSPackage.pl', '--package=' + package, '--admin=' + admins, '--developers=' + developers])

def _queryCVS(args):
  return _popen(['cvs', '-q'] + args)

def _queryCVSHeaders(args):
  return _queryCVS(['rlog', '-h'] + args)

def _queryCVSDiff(old_rev, new_rev, args):
  return _queryCVS(['rdiff', '-u', '-r' + old_rev, '-r' + new_rev] + args)

def queryCVSDiff(old_tag, new_tag, package):
  return _queryCVSDiff(old_tag, new_tag, [package])

def queryCVSCheckout(tag, args):
  return _queryCVS(['co', '-p', '-r', tag] + args)

def _getRequire(l):
  if len(l) != 2 or l[0] != 'Requires:':
    return None
  external = l[1]
  if 'toolfile' in external:
    external = external.rsplit('-', 1)
    if len(external) != 2 or external[1] != 'toolfile':
      return None
    return external[0]
  return external

def _getExternalSpecFilename(external):
  return 'COMP/CMSDIST/' + external + '.spec'

def getCMSDIST(tag = 'HEAD'):
  s = queryCVSCheckout(tag, ['COMP/CMSDIST/cmssw-tool-conf.spec']).splitlines()
  externals = set([])
  for l in s:
    l = l.split()
    external = _getRequire(l)
    if not external:
      continue
    externals.add(external)
  ret = {}
  new_externals = externals
  while True:
    if len(new_externals) == 0:
      break
    s = queryCVSCheckout(tag, [_getExternalSpecFilename(e) for e in new_externals]).splitlines()
    new_externals = set([])
    for l in s:
      l = l.split()
      if len(l) == 5 and l[0] == '###' and l[1] == 'RPM' and (l[2] == 'external' or l[2] == 'cms' or l[2] == 'lcg'):
        external = l[3]
        version = l[4]
        if external in ret:
          if version != ret[external]:
            raise "Collision"
          continue
        ret[external] = version
        continue
      external = _getRequire(l)
      if not external or external in ret or external in new_externals:
        continue
      new_externals.add(external)
  return ret

def getCMSDISTs(tags, diff):
  cmsdists = {}
  for tag in tags:
    cmsdists[tag] = getCMSDIST(tag)
  externals = set([])
  for cmsdist in cmsdists:
    externals = externals.union(set(cmsdists[cmsdist].keys()))
  ret = []
  for external in externals:
    x = [external]
    y = set([])
    same = False
    for tag in tags:
      if external in cmsdists[tag]:
        z = cmsdists[tag][external]
      else:
        z = None
      x.append(z)
      y.add(z)
    if diff and len(y) == 1:
      continue
    ret.append(tuple(x))
  return sorted(ret)

def getPackageCVSTags(package_name, limit = 10):
  s = _queryCVSHeaders([package_name + '/.admin/developers',]).split('\n')
  r = re.compile("^.*(V[-0-9]+):.*$")
  tags = set([])
  for l in s:
    if len(tags) >= limit:
      break
    m = r.match(l)
    if not m:
      continue
    tags.add(m.groups()[0])
  return sorted(tags, reverse=True)

# Prints a formatted table from a list of tuples.
def printTable(tags):
  if not tags:
    return
  sizeTag = len(tags[0])
  # Get the maximum size for all the fields.
  maxSize = dict([(x, 0) for x in xrange(sizeTag)])
  for tag in tags:
    for i in xrange(sizeTag):
      maxSize[i] = max(maxSize[i], tag[i] and len(tag[i]) or 1)
  for tag in tags:
    f = "".join("%%-%is  " % maxSize[x] for x in xrange(sizeTag))
    print f % tuple([x or "-" for x in tag])

def printTags(tags):
  if not tags:
    return
  sizeTag = len(tags[0])
  # Get the maximum size for all the fields.
  maxSize = dict([(x, 0) for x in xrange(sizeTag)])
  for tag in tags:
    for i in xrange(sizeTag):
      if tag[i] == None:
          tag[i] = '-'
      if type(tag[i]) is list:
          list_str = ""
          isFirst = True
          for unit in tag[i]:
              if not isFirst:
                  list_str += ","
              else:
                  isFirst = False
              list_str += str(unit)
          tag[i] = list_str
      tag[i] = normalizeStr(tag[i])
      maxSize[i] = max(maxSize[i], len(tag[i]))
  for tag in tags:
    f = "".join("%%-%is  " % maxSize[x] for x in xrange(sizeTag))
    print f % tuple([x or "-" for x in tag])
    
def normalizeStr(value):
    value = str(value)
    return value.replace(' ', '_')

def printIBs(ibs):
  for ib in ibs:
    print ib[1], ib[0]

def printIBsLast(ibs):
  for ib in ibs:
    print ib[0]

def cmd_tags(releases):
  printTags(tc.getReleasesTags(releases))

def cmd_diff(releases):
  if len(releases) < 2:
    print "Error: Please specify two releases."
    exit(1)
  printTags(tc.getReleasesTags(releases, True))

def cmd_difflast(releases):
  a = tc.getReleasesTags(releases, True)
  printTable([(x[0], x[-1]) for x in a])

def number(tag):
  if not tag.startswith("V"):
    raise RuntimeErrror("Not a valid tag %s" % tag) 
  digits = tag[1:].split("-")
  if len(digits) < 3 or len(digits) > 4:
    raise RuntimeError("Not a valid tag %s" % tag)
  if [x for x in digits if not x.isdigit()]:
    raise RuntimeError("Not a valid tag %s" % tag)
  digits = [int(x) for x in digits]
  # Handle the case we have V01-00-00-00 which 
  # must be grater than V01-00-00
  if len(digits) == 4:
    digits[3] += 1
  if len(digits) == 3:
    digits.append(0)
  return 1000000*digits[0] + 10000*digits[1] + 100*digits[2] + digits[3]

def cmd_tagset(args):
  import commands
  parser = optparse.OptionParser(usage="cmstc tagset [-a] <tagset-id> [<tagset-id> ..]")
  parser.add_option("-a", dest="doAdd", action="store_true", default=False, help="Checkout tags")
  parser.add_option("--merge", "-m", dest="doMerge", action="store_true", default=False, help="Merge tagsets by picking most recent tags when there are overlaps")
  opts, tagsets = parser.parse_args(args)
  allTags = {}
  # If --merge is specified, we only update packages which have more recent tags.
  for tagset in tagsets:
    tags = tc.getTagsetTags(tagset)
    if not opts.doMerge:
      allTags.update(tags)
    else:
      for (name, version) in tags:
        if not name in allTags:
          allTags[name] = version
        elif number(version) > number(allTags[name]):
          allTags[name] = version
  allTags = allTags.items()
  printTable(allTags) 
  if not opts.doAdd:
    return
  for (name, version) in allTags:
    command = "addpkg %s %s" % (name, version)
    error, output = commands.getstatusoutput(command)
    print output
    if error:
      print output
      raise RuntimeError("Error while downloading package %s %s." % (name, version))

def cmd_tagsetinfo(tagset):
  if len(tagset) != 1:
    raise Exception("Error: Expected a tagset.")
  tagset = tagset[0]
  information = tc.getTagsetInformation(tagset)
  print '   Tagset: ', information['id']
  print '  Release: ', information['release_name']
  print '    State: ', information['state']
  print '   Author: ', information['author']
  print
  print 'Tagset:'
  printTags(tc.getTagsetTags(tagset))
  print
  print 'Description:'
  print information['description']

def cmd_search(term):
  if len(term) != 1:
    raise Exception("Error: Expected a single word.")
  term = term[0]
  tc.signInInteractive()
  results = tc.search(term)
  for result in results:
    print ' '*(10 - len(result['type'])) + result['type'] + '  ' + result['value']

def cmd_tagsappr(args):
  parser = optparse.OptionParser()
  parser.add_option("-m", "--multiple", action="store_true", dest="multiple", default=False)
  (opts, args) = parser.parse_args(args)
  multiple = opts.multiple
  if len(args) < 1:
    raise Exception("Error: Expected at least a tagset ID or release name.")
  printTags(sorted(tc.getPendingApprovalTags(args, multiple)))

def cmd_tagssign(args):
  current_user = getpass.getuser()
  parser = optparse.OptionParser(usage="cmstc tagssign <CMSSW_X_Y_Z1> ... <CMSSW_X_Y_Zn> [-u <username>] [--all] [--author]")
  parser.add_option("-u", "--username", dest="username", default=current_user, help="username, if not provided will be taken current system user")
  parser.add_option("-a", "--all", dest="show_all", action="store_true", default=False, help="once set it shows all the pending signatures for all the users, overrides all other options except releases")
  parser.add_option("-t", "--author", dest="author_tagsets", action="store_true", default=False, help="once set it shows all the pending signatures queued by the user")
  (opts, args) = parser.parse_args(args)
  release_names = None
  for arg in args:
      if 'CMSSW_' in arg:
          if release_names == None:
              release_names = []
          release_names.append(arg)
  tagsetTagsHeader = ["Release", "Tagset_Id", "Package", "Tag", "Dependencies", "Pending_Signatures", "Provided_Signatures"]
  tagsetTags = tc.getTagsetsTagsPendingSignatures(opts.username, opts.show_all, opts.author_tagsets, release_names)
  tagsetTagsFinal = [tagsetTagsHeader]
  for tagsetTag in tagsetTags:
      tagsetTagsFinal.append(tagsetTag)
  printTags(tagsetTagsFinal)

def cmd_ibs(filt):
  if filt:
    filt = filt[0]
  else:
    filt = ''
  printIBs(tc.getIBs(filt))

def cmd_lastib(filt):
  if len(filt) != 1:
    raise Exception("Error: Expected a filter (single word).")
  filt = filt[0]
  printIBsLast(tc.getIBs(filt, 1))

def cmd_pkghist(package):
  if len(package) != 1:
    raise Exception("Error: Expected a package (single word).")
  package = package[0]
  tags = tc.getPackageTags(package)
  cvstags = getPackageCVSTags(package)
  for cvstag in cvstags:
    tagdescription = ''
    tagreleases = ()
    if cvstag in tags:
      tagdescription = tc.getPackageTagDescriptionFirstLine(package, cvstag)
      tagreleases = tc.getPackageTagReleases(package, cvstag)
    print formatTag(cvstag) + tagdescription
    for tagrelease in tagreleases:
      print ' ' * _maxtaglen + tagrelease

def tagset_cmd(args, command):
  parser = optparse.OptionParser()
  parser.add_option("-c", "--comment", dest="comment", default='')
  (opts, args) = parser.parse_args(args)
  tagset_ids = args
  comment = opts.comment
  if len(tagset_ids) < 1:
    raise Exception("Error: Expected at least one tagset ID.")
  print 'Tagset IDs:', tagset_ids
  print '   Comment: "' + comment + '"'
  tc.signInInteractive()
  getattr(tc, command)(tagset_ids, comment)

def cmd_comment(args):
  tagset_cmd(args, 'commentTagsets')

def cmd_sign(args):
  tagset_cmd(args, 'signTagsets')

def cmd_signall(args):
  tagset_cmd(args, 'signTagsetsAll')

def cmd_rejectsign(args):
  tagset_cmd(args, 'rejectTagsetsPendingSignatures')

def cmd_approve(args):
  tagset_cmd(args, 'approveTagsets')

def cmd_bypass(args):
  tagset_cmd(args, 'bypassTagsets')

def cmd_rejectappr(args):
  tagset_cmd(args, 'rejectTagsetsPendingApproval')

def cmd_remove(args):
  tagset_cmd(args, 'removeTagsets')

def cmd_pendingpkgs(args):
  parser = optparse.OptionParser()
  parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False)
  (opts, args) = parser.parse_args(args)
  packages = tc.getPackagesPendingApproval()
  if not opts.verbose:
    packages = sorted([p[0] for p in packages])
    for package in packages:
      print package
    return
  for package in packages:
    print "    Package:", package[0]
    print "Description:", package[1].splitlines()[0][:60], '(...)'
    print "  Requested:", package[2]
    print

def cmd_approvepkgs(packages):
  if len(packages) < 1:
    return
  tc.signInInteractive()
  pending_packages = tc.getPackagesPendingApproval()
  pending_packages = frozenset([p[0] for p in pending_packages])
  for package in packages:
    print "Package", package
    if package not in pending_packages:
      raise Exception("Error: The package is not pending approval.")
    print "Getting list of admins and developers from TC..."
    (developers, admins) = tc.getPackageManagersRequested(package)
    if len(developers) < 1:
      raise Exception("Error: No developers?!")
    if len(admins) < 1:
      raise Exception("Error: No admins?!")
    print "      Admins =", ','.join(admins)
    print "  Developers =", ','.join(developers)
    print "Getting list of admins and developers from TC... DONE"
    print "Creating package in CVS..."
    _createCVSPackage(package, admins, developers)
    print "Creating package in CVS... DONE"
    print "Approving package in TC..."
    tc.approvePackage(package)
    print "Approving package in TC... DONE"
  tc.signOut()

def cmd_cmsdisttags(cvstags):
  printTags(getCMSDISTs(cvstags, False), 20)

def cmd_cmsdistdiff(cvstags):
  printTags(getCMSDISTs(cvstags, True), 20)

def cmd_deprecaterel(args):
  usage = "usage: %prog deprecaterel <release1> [<release2> [...]]"
  parser = optparse.OptionParser(usage=usage)
  (opts, args) = parser.parse_args(args)
  if not args:
    parser.error("Please specify at least one release to deprecate")
  username = tc.signInInteractive()
  tc.deprecateReleases(*args)
  tc.signOut()

def cmd_createrel(args):
  usage = "usage: %prog createrel [option1] arg1 [option2] arg2 ... [optionN] argN"
  parser = optparse.OptionParser(usage=usage)
  parser.add_option("-c", "--copyQueues", action="store_true", dest="copyQueues", default=False, help="Copy queues")
  parser.add_option("-p", "--private", action="store_true", dest="isPrivate", default=False, help="Is private release?")
  parser.add_option("-r", "--release", dest="release", help="New release name")
  parser.add_option("-b", "--baseRelease", dest="baseRelease", help="Base release name", default="")
  parser.add_option("-s", "--state", dest="state", help="New release state: [Open, Closed, Finished, Announced, Deprecated]", default="Open")
  parser.add_option("-t", "--type", dest="type", help="New release type: [Development, Analysis, Integration Build, Production]", default="Development")
  parser.add_option("-d", "--description", dest="description", help="New release description, please use more than 4 letters", default="New release is added")
  parser.add_option("-m", "--managers", dest="managers", help="Sets release manager(s) and overrides the default current user. Multiple users can be listed, use ',' as separator", default="")
  parser.add_option("-a", "--tags", dest="tags", help="New release tags", default="")
  (opts, args) = parser.parse_args(args)
  
  if opts.release == None:
      raise Exception("Error: No release name?!")
  
  if opts.baseRelease == None:
      raise Exception("Error: No base release name?!")
  
  username = tc.signInInteractive()
  
  if opts.managers == "":
      opts.managers = username
  else:
      opts.managers = opts.managers
  packages = tc.getPackagesPendingApproval()
  
  if opts.isPrivate:
      opts.isPrivate = "true"
  else:
      opts.isPrivate = "false"
  if opts.copyQueues:
      opts.copyQueues = "true"
  else:
      opts.copyQueues = "false"
      
  if not opts.tags == "":
      tags = opts.tags.split(",")
      opts.tags = ""
      for tag in tags:
          opts.tags += tag.strip() + "\n"
  tc.createRelease(opts.baseRelease, opts.release, opts.state, opts.isPrivate, opts.type, opts.description, opts.managers, opts.copyQueues, opts.tags)
  tc.signOut()
  print "The release " + opts.release + " is successfully created!"
  
def cmd_requestcib(args):
  usage = "usage: %prog requestcib [option1] arg1 [option2] arg2 ... [optionN] argN"
  parser = optparse.OptionParser(usage=usage)
  parser.add_option("-r", "--release", dest="release", help="Release name")
  parser.add_option("-a", "--architectures", dest="architectures", help="The architectures for custom ib")
  parser.add_option("-t", "--tags", dest="tags", help="Tags to apply into custom ib")
  (opts, args) = parser.parse_args(args)
  
  if opts.release == None:
      raise Exception("Error: No release name?!")
  
  if opts.architectures == None:
      raise Exception("Error: No architectures?!")
  
  if opts.tags == None:
      raise Exception("Error: No tags?!")
  
  tc.signInInteractive()
      
  if not opts.tags == "":
      tags = opts.tags.split(",")
      opts.tags = ""
      for tag in tags:
          opts.tags += tag.strip() + "\n"
  
  relarchs = tc.getReleaseArchitectures(opts.release)
  architectures = opts.architectures.split(',')
  opts.architectures = '['
  isFirst = True
  for arch in architectures:
      if not _isArchInRelease(arch, relarchs):
          raise Exception("Error: the architecture " + arch + " is not present in the release " + opts.release + ". Type 'cmstc relarch " + opts.release + "' to see the available architectures.")
      if not isFirst:
          opts.architectures += ','
      else:
          isFirst = False
      opts.architectures += '"'+arch.strip()+'"'
  opts.architectures += ']'
  tc.requestCustomIB(opts.release, opts.architectures, opts.tags)
  tc.signOut()
  print "The Custom IB is successfully requested!"
  
def _isArchInRelease(arch, relarchs):
    for relarch in relarchs:
        if relarch[0] == arch:
            return True
    return False

def cmd_relarch(args):
    release = None
    filter = None
    if len(args) == 1:
        release = args[0]
    elif len(args) == 2:
        release = args[0]
        filter = args[1]
        if (not filter == "prod") and (not filter == "dev"):
            raise Exception("Error: filter can be either 'prod' or 'dev', you've specified: " + filter)
    else:
        raise Exception( """Error: please specify only one parameter - name release name to see all the architectures or
        two parameters - the release name and filter 'prod' or 'dev' to see all the production or development architectures respectively""")
    data = tc.getReleaseArchitectures(release)
    if filter == None:
        print "The release " + release + " architectures:"
        for unit in data:
            type = ""
            if unit[1]:
                type = " - production"
            print unit[0] + type
    else:
        print "The release " + release + " architectures for the filter '" + filter + "':"
        for unit in data:
            if unit[1] and filter == "prod":
                print unit[0]
            elif not unit[1] and filter == "dev":
                print unit[0]
        
def main():
  try:
    args = sys.argv[1:]
    cmd = globals()['cmd_' + args[0]]
  except:
    print __doc__
    sys.exit(-1)

  cmd(args[1:])

if __name__ == "__main__":
  main()

