#! /usr/bin/perl

use strict;
use warnings;

###DEFAULTS (ALL OVERWRITTEN BY CORRESPONDING ENV VARIABLES)###

my $CMS_STORM_ENDPOINT=undef; #IF undef IS TAKEN FROM SURL

my $CMS_STORM_PTG_TIMEOUT=300;

my $CMS_STORM_PTG_POLLING=1;

my $CMS_STORM_CLIENT_PATH=undef; #CAN SET THE PATH VARIABLE DIRECTLY

my $CMS_STORM_CLIENT_LD_PATH=undef; #CAN SET THE LD_PATH VARIABLE DIRECTLY

my $CMS_STORM_CLIENT_DEFAULT_PROTO="file";
###COMMAND LINE ARGS###

my $SURL=shift;

my $PROTO="file";

$PROTO=$CMS_STORM_CLIENT_DEFAULT_PROTO unless(defined($PROTO));

die 'No command line protocol specified and no default protocol set\n' unless(defined($PROTO));

die "ERROR: Usage: storm-ptg SURL [PROTO]\n" unless(defined($SURL) && defined($PROTO));

###GLOBALS###

my $REQID=undef;

my $TURL=undef;

my $OUTPUT=undef;

###FUNCTIONS###

sub getEndPoint
{
    if(defined($ENV{CMS_STORM_ENDPOINT}))
    {
	$CMS_STORM_ENDPOINT=$ENV{CMS_STORM_ENDPOINT};
	return;
    }
    elsif(defined($CMS_STORM_ENDPOINT))
    {
	return;
    }
    else
    {
	$SURL =~ /^\s*(srm:\S+)\?SFN=\S+\s*$/;
	$CMS_STORM_ENDPOINT=$1;
	die "ERROR: cannot determine CMS_STORM_ENDPOINT value" unless(defined($CMS_STORM_ENDPOINT));    
	return;
    }
}


sub getTimeout
{
    if(defined($ENV{CMS_STORM_PTG_TIMEOUT}))
    {
	$CMS_STORM_PTG_TIMEOUT=int($ENV{CMS_STORM_PTG_TIMEOUT});
	return;
    }
    elsif(defined($CMS_STORM_PTG_TIMEOUT))
    {
	return;
    }
    else
    {
	die "ERROR: cannot determine CMS_STORM_PTG_TIMEOUT value"; 
    }
}



sub getPolling
{
    if(defined($ENV{CMS_STORM_PTG_POLLING}))
    {
	$CMS_STORM_PTG_POLLING=int($ENV{CMS_STORM_PTG_POLLING});
	return;
    }
    elsif(defined($CMS_STORM_PTG_POLLING))
    {
	return;
    }
    else
    {
	die "ERROR: cannot determine CMS_STORM_PTG_POLLING value"; 
    }

}


sub getPath
{
    if(defined($ENV{CMS_STORM_CLIENT_PATH}))
    {
	$CMS_STORM_CLIENT_PATH=$ENV{CMS_STORM_CLIENT_PATH};
	return;
    }
    elsif(defined($CMS_STORM_CLIENT_PATH))
    {
	return;
    }
    else
    {
	warn "WARN: CMS_STORM_CLIENT_PATH has no value"; 
    }
}


sub getLDPath
{
    if(defined($ENV{CMS_STORM_CLIENT_LD_PATH}))
    {
	$CMS_STORM_CLIENT_LD_PATH=$ENV{CMS_STORM_CLIENT_LD_PATH};
	return;
    }
    elsif(defined($CMS_STORM_CLIENT_LD_PATH))
    {
	return;
    }
    else
    {
	warn "WARN: CMS_STORM_CLIENT_LD_PATH has no value"; 
    }
}



sub addPaths()
{
   
    getPath();

    getLDPath();

    if(defined($CMS_STORM_CLIENT_LD_PATH))
    {
	$ENV{LD_LIBRARY_PATH}="$CMS_STORM_CLIENT_LD_PATH:$ENV{LD_LIBRARY_PATH}";
    }

    if(defined($CMS_STORM_CLIENT_PATH))
    {
	$ENV{PATH}="$CMS_STORM_CLIENT_PATH:$ENV{PATH}";
    }
}


sub execPtG
{
    my $cl="clientSRM PtG -e $CMS_STORM_ENDPOINT -s $SURL -T -P file|"; 

    open(PTG,"$cl") or die "ERROR: cannot execute command line $cl";

    $OUTPUT="";

    while(<PTG>)
    {
	$OUTPUT.=$_;

	if(/^\s*requestToken="(\S+)"\s*$/)
	{
	    $REQID=$1;
	}
    }

    close  PTG;

    die "ERROR: $OUTPUT\nno request token found" unless(defined($REQID));

    return;
}


sub poll
{
    my $cl="clientSRM StatusPtG -e $CMS_STORM_ENDPOINT -t $REQID|"; 
	
    open(PTGSTATUS,$cl) or die "ERROR: cannot execute command line $cl";

    $OUTPUT="";
    
    my $status;

#    my $req_status;

    while(<PTGSTATUS>)
    {
	$OUTPUT.=$_;

	if(/^\s*statusCode="(\S+)"\(\S+\)\s*$/)
	{
	    $status=$1;
	}
#	if(/^\s*\[\S+\]\s*status:\s*statusCode="(\S+)"\(\S+\)\s*$/)
#	{
#	    $status=$1;
#	}
	if(/^\s*\[\S+\]\s*transferURL="file:[\/]+(\S+)"\s*$/)
	{
#DB
#	    print STDERR "matched: $1\n"; 
	    $TURL="/$1";
	}

    }

    close PTGSTATUS;

    if($status eq "SRM_SUCCESS")
    {	
	return 1;
    }
    elsif(($status eq "SRM_REQUEST_INPROGRESS") or ($status eq "SRM_REQUEST_QUEUED"))
    {
#DB
#	    print STDERR "Exiting Poll matched: $TURL\n"; 
	    return 0;
    }
    elsif($status eq "SRM_FAILURE")
    {
	$TURL=undef;
	return 1;
    }
    else
    {
	warn "WARN: Ping Failed:\n$OUTPUT";
	return 0;
    }
    
}


###MAIN###

getEndPoint();

getTimeout();

getPolling();

addPaths();

execPtG();

print "Prepare to Get request:\n$OUTPUT\n";

my $elapsed=0;


while((poll()==0) and ($elapsed*$CMS_STORM_PTG_POLLING <= $CMS_STORM_PTG_TIMEOUT))
{
    system("sleep  $CMS_STORM_PTG_POLLING");
    $elapsed++;
#DB
#    print STDERR "TURL=$TURL\n";
}

#DB
#    print STDERR "Out of loop TURL=$TURL\n";

my $elapsed_time=$elapsed*$CMS_STORM_PTG_POLLING;

print "Elapsed time: $elapsed_time sec\n";

print "Last Polling:\n$OUTPUT\n";


if(defined($TURL))
{
    print "FilePath:$TURL\n";
}
else
{
    print "No FilePath Matched!\n"
}
