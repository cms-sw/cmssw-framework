/* vim: set filetype=cpp: */

/*
 * Interval Manager implementation
 */

template<typename TimeType, typename PayloadType>
const l1t::Interval<TimeType, PayloadType> & l1t::IntervalManager<TimeType, PayloadType>::find (const TimeType & time) const
{
    typename IntervalMap::const_iterator it = intervalMap.upper_bound (time);

    // check if requested time is not too low.
    if (it == intervalMap.begin ())
        return Interval<TimeType, PayloadType>::invalid ();

    // upper_bound will return value that is greather then time. So we go back and found good interval
    it --;

    // finally make sure that this is correct interval. It could be that we got end () because we time
    // is bigger then we have in map
    if (it->second.start () <= time && it->second.end () >= time)
        return it->second;

    return Interval<TimeType, PayloadType>::invalid ();
}

/*
 * Interval implementation
 */
template<typename TimeType, typename PayloadType>
l1t::Interval<TimeType, PayloadType> & l1t::Interval<TimeType, PayloadType>::invalid ()
{
    static Interval invalid = Interval (TimeType (), TimeType ());
    invalid.isInvalid= true;
    return invalid;
}
