#ifndef PhysicsTools_MVATrainer_XMLDocument_icc
#define PhysicsTools_MVATrainer_XMLDocument_icc

#include <iomanip>
#include <sstream>
#include <string>

#include <xercesc/dom/DOM.hpp>
#include <xercesc/dom/DOMDocument.hpp>

#include "FWCore/Utilities/interface/Exception.h"

#include "PhysicsTools/MVATrainer/interface/XMLSimpleStr.h"
#include "PhysicsTools/MVATrainer/interface/XMLUniStr.h"
#include "PhysicsTools/MVATrainer/interface/XMLDocument.h"

template<typename T>
T XMLDocument::readAttribute(XERCES_CPP_NAMESPACE_QUALIFIER DOMElement *elem,
                             const char *name)
{
	XMLUniStr uniName(name);
	if (!elem->hasAttribute(uniName))
		throw cms::Exception("XMLDocument")
			<< "Missing attribute " << name << " in tag "
			<< XMLSimpleStr(elem->getNodeName())
			<< "." << std::endl;
	const XMLCh *attribute = elem->getAttribute(uniName);
	T value = T();
	std::istringstream buffer((const char*)XMLSimpleStr(attribute));
	buffer >> value;
	if (buffer.bad() || !buffer.eof())
		throw cms::Exception("XMLDocument")
			<< "Badly formatted attribute " << name << " in tag "
			<< XMLSimpleStr(elem->getNodeName())
			<< "." << std::endl;
	return value;
}

template<typename T>
T XMLDocument::readAttribute(XERCES_CPP_NAMESPACE_QUALIFIER DOMElement *elem,
                             const char *name, const T &defValue)
{
	XMLUniStr uniName(name);
	if (!elem->hasAttribute(uniName))
		return defValue;
	const XMLCh *attribute = elem->getAttribute(uniName);
	std::istringstream buffer((const char*)XMLSimpleStr(attribute));
	T value = defValue;
	buffer >> value;
	if (buffer.bad() || !buffer.eof())
		throw cms::Exception("XMLDocument")
			<< "Badly formatted attribute " << name << " in tag "
			<< XMLSimpleStr(elem->getNodeName())
			<< "." << std::endl;
	return value;
}

template<typename T>
void XMLDocument::writeAttribute(XERCES_CPP_NAMESPACE_QUALIFIER DOMElement *elem,
                                 const char *name, const T &value)
{
	std::ostringstream os;
	os << std::setprecision(16) << value;
	elem->setAttribute(XMLUniStr(name), XMLUniStr(os.str().c_str()));
}

template<typename T>
T XMLDocument::readContent(XERCES_CPP_NAMESPACE_QUALIFIER DOMNode *node)
{
	const XMLCh *content = node->getTextContent();
	T value = T();
	std::istringstream buffer((const char*)XMLSimpleStr(content));
	buffer >> value;
	if (buffer.bad() || !buffer.eof())
		throw cms::Exception("XMLDocument")
			<< "Badly formatted content in tag "
			<< XMLSimpleStr(node->getNodeName())
			<< "." << std::endl;
	return value;
}

template<typename T>
void XMLDocument::writeContent(XERCES_CPP_NAMESPACE_QUALIFIER DOMNode *node,
                               XERCES_CPP_NAMESPACE_QUALIFIER DOMDocument *doc,
                               const T &value)
{
	std::ostringstream os;
	os << std::setprecision(16) << value;
	node->appendChild(doc->createTextNode(XMLUniStr(os.str().c_str())));
}

// specialization for bool

template<>
bool XMLDocument::readAttribute(XERCES_CPP_NAMESPACE_QUALIFIER DOMElement *elem,
                                const char *name);

template<>
bool XMLDocument::readAttribute(XERCES_CPP_NAMESPACE_QUALIFIER DOMElement *elem,
                                const char *name, const bool &defValue);

template<>
void XMLDocument::writeAttribute(XERCES_CPP_NAMESPACE_QUALIFIER DOMElement *elem,
                                 const char *name, const bool &value);

template<>
bool XMLDocument::readContent(XERCES_CPP_NAMESPACE_QUALIFIER DOMNode *node);

template<>
void XMLDocument::writeContent(XERCES_CPP_NAMESPACE_QUALIFIER DOMNode *node,
                               XERCES_CPP_NAMESPACE_QUALIFIER DOMDocument *doc,
                               const bool &value);

#endif // PhysicsTools_MVATrainer_XMLDocument_icc
