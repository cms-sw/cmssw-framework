
/*!

\page L1Trigger_GlobalMuonTrigger Package L1Trigger/GlobalMuonTrigger

<center>
<small>

<!-- @PROJ_VERS@ will be substituted at build time, no need to touch -->
<a href=http://cmsdoc.cern.ch/swdev/viewcvs/viewcvs.cgi/CMSSW/L1Trigger/GlobalMuonTrigger/?cvsroot=CMSSW&only_with_tag=@PROJ_VERS@>CVS</a> - 
<a href=http://cmsdoc.cern.ch/swdev/viewcvs/viewcvs.cgi/CMSSW/L1Trigger/GlobalMuonTrigger/.admin/developers?rev=HEAD&cvsroot=CMSSW&content-type=text/vnd.viewcvs-markup>Administrative privileges</a>
</small>
</center>

\section desc Description
<!-- Short description of what this package is supposed to provide -->

CMS has a sophisticated muon system with special dedicated trigger chambers in
addition to the normal tracking chambers. The RPC trigger chambers produce a
pattern of hits, the drift tube and cathode strip tracking chambers deliver
track vectors at each muon station. Regional triggers of the three subsystems,
the PAC trigger of the RPCs and the DT and CSC track finders, all deliver muon
tracks. In general, a muon will be found by both by the RPC and the DT or CSC
track finders. The task of the Global Muon Trigger (GMT) is to combine the
results of all these subsystems by finding the four best muons of every bunch
crossing and transmitting them to the Global Trigger (GT).

In addition to finding the four best muons the GMT appends two bits set by the
Calorimeter Regional Trigger, a MIP bit and an isolation bit, also called quiet bit, to each of the
muon data words. The MIP bit is set if the calorimeter energy is consistent with the passage of a
minimum ionizing particle, the isolation or quiet bit is set if a certain energy threshold in the trigger
towers surrounding the muon is not exceeded. Both bits are used in the GT to suppress background
and to improve selectivity.


\subsection interface Public interface
<!-- List the classes that are provided for use in other packages (if any) -->

The Global Muon Trigger receives 4 muon candidates from the DTBX based barrel
Muon Trigger Track Finder, 4 muon candidates from the
CSC based endcap Muon Trigger Track Finder and 8 muon
candidates (4 barrel + 4 endcap) from the RPC Trigger.

In addition it receives 252 isolation and 252 MIP bits from 
the calorimeter trigger.


The \c L1MuGlobalMuonTrigger is an \c EDProducer. It produces a vector of GMT muon candidates for the Global Trigger \c std::vector<L1MuGMTCand> and a collection of readout records \c L1MuGMTReadoutCollection. Both classes reside in DataFormats/L1GlobalMuonTrigger.

\subsection modules Modules
<!-- Describe modules implemented in this package and their parameter set -->

A set of default parameters can be found in the gmt.cfi file in the test directory of the package.

<h3>Parameters</h3>
\htmlonly
<table BORDER WIDTH="100%" NOSAVE >
<tr NOSAVE>
 <td NOSAVE><b>Name</b></td>
 <td><b>Type</b></td>
 <td><b>Default</b></td>
</tr>
<tr>
 <td>Debug</td>
 <td>int</td>
 <td>0</td>
</tr>
<tr>
 <td>BX_min</td>
 <td>int</td>
 <td>-4</td>
</tr>
<tr>
 <td>BX_max</td>
 <td>int</td>
 <td>4</td>
</tr>
<tr>
 <td>EtaWeight_barrel</td>
 <td>float</td>
 <td>0.028</td>
</tr>
<tr>
 <td>PhiWeight_barrel</td>
 <td>float</td>
 <td>1.0</td>
</tr>
<tr>
 <td>EtaPhiThreshold_barrel</td>
 <td>float</td>
 <td>0.062</td>
</tr>
<tr>
 <td>EtaWeight_endcap</td>
 <td>float</td>
 <td>0.13</td>
</tr>
<tr>
 <td>PhiWeight_endcap</td>
 <td>float</td>
 <td>1.0</td>
</tr>
<tr>
 <td>EtaPhiThreshold_endcap</td>
 <td>float</td>
 <td>0.062</td>
</tr>
<tr>
 <td>CaloTrigger</td>
 <td>bool</td>
 <td>true</td>
</tr>
<tr>
 <td>IsolationCellSizeEta</td>
 <td>int</td>
 <td>2</td>
</tr>
<tr>
 <td>IsolationCellSizePhi</td>
 <td>int</td>
 <td>2</td>
</tr>
<tr>
 <td>EtaWeight_COU</td>
 <td>float</td>
 <td>0.316</td>
</tr>
<tr>
 <td>PhiWeight_COU</td>
 <td>float</td>
 <td>1.0</td>
</tr>
<tr>
 <td>EtaPhiThreshold_COU</td>
 <td>float</td>
 <td>0.127</td>
</tr>
<tr>
 <td>COUConfig</td>
 <td>int</td>
 <td>obsolete</td>
</tr>
<tr>
 <td>DoOvlRpcAnd</td>
 <td>bool</td>
 <td>0</td>
</tr>
<tr>
 <td>PropagatePhi</td>
 <td>bool</td>
 <td>false</td>
</tr>
<tr>
 <td>MergeMethodPhiBrl</td>
 <td>takeDT, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>takeDT</td>
</tr>
<tr>
 <td>MergeMethodPhiFwd</td>
 <td>takeCSC, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>takeCSC</td>
</tr>
<tr>
 <td>MergeMethodEtaBrl</td>
 <td>takeDT, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>Special</td>
</tr>
<tr>
 <td>MergeMethodEtaFwd</td>
 <td>takeCSC, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>Special</td>
</tr>
<tr>
 <td>MergeMethodPtBrl</td>
 <td>takeDT, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>byMinPt</td>
</tr>
<tr>
 <td>MergeMethodPtFwd</td>
 <td>takeCSC, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>byMinPt</td>
</tr>
<tr>
 <td>MergeMethodChargeBrl</td>
 <td>takeDT, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>takeDT</td>
</tr>
<tr>
 <td>MergeMethodChargeFwd</td>
 <td>takeCSC, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>takeCSC</td>
</tr>
<tr>
 <td>MergeMethodMIPBrl</td>
 <td>takeDT, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>Special</td>
</tr>
<tr>
 <td>MergeMethodMIPFwd</td>
 <td>takeCSC, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>Special</td>
</tr>
<tr>
 <td>MergeMethodMIPSpecialUseANDBrl</td>
 <td>bool</td>
 <td>false</td>
</tr>
<tr>
 <td>MergeMethodMIPSpecialUseANDFwd</td>
 <td>bool</td>
 <td>false</td>
</tr>
<tr>
 <td>MergeMethodISOBrl</td>
 <td>takeDT, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>Special</td>
</tr>
<tr>
 <td>MergeMethodISOFwd</td>
 <td>takeCSC, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>Special</td>
</tr>
<tr>
 <td>MergeMethodISOSpecialUseANDBrl</td>
 <td>bool</td>
 <td>true</td>
</tr>
<tr>
 <td>MergeMethodISOSpecialUseANDFwd</td>
 <td>bool</td>
 <td>true</td>
</tr>
<tr>
 <td>MergeMethodSRKBrl</td>
 <td>takeDT, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>takeDT</td>
</tr>
<tr>
 <td>MergeMethodSRKFwd</td>
 <td>takeCSC, takeRPC, byRank, byMinPt, byCombi, Special</td>
 <td>takeCSC</td>
</tr>
<tr>
 <td>HaloOverwritesMatchedBrl</td>
 <td>bool</td>
 <td>true</td>
</tr>
<tr>
 <td>HaloOverwritesMatchedFwd</td>
 <td>bool</td>
 <td>true</td>
</tr>
<tr>
 <td>SortRankOffsetBrl</td>
 <td>unsigned</td>
 <td>10</td>
</tr>
<tr>
 <td>SortRankOffsetFwd</td>
 <td>unsigned</td>
 <td>10</td>
</tr>
<tr>
 <td>CDLConfigWordDTCSC</td>
 <td>unsigned</td>
 <td>2</td>
</tr>
<tr>
 <td>CDLConfigWordCSCDT</td>
 <td>unsigned</td>
 <td>3</td>
</tr>
<tr>
 <td>CDLConfigWordbRPCCSC</td>
 <td>unsigned</td>
 <td>16</td>
</tr>
<tr>
 <td>CDLConfigWordfRPCDT</td>
 <td>unsigned</td>
 <td>1</td>
</tr>
</table>
\endhtmlonly


<h2>Cancel-decision logic configuration</h2>

There are four cancel-out units in the GMT. In the hardware, two of
them are located in the Barrel Logic FPGA and two of them in the
Forward Logic FPGA (as indicated in the thirs row of the table,
below).Each unit has two groups of muons as an input
(first/second). If a muon in the first group and a muon in the second
group match in eta an phi, then either of them (or both) may be
cancelled, depending on the configuration of the cancel-decision
logic. The table below lists the possible cancel-options and the
default settings. The options correspond to one bit each in the cancel
decsision configuration word and may be freely combined. 'is matched'
in the table refers to the muon being matched with a complementary
muon in its main matiching unit. For example the default configuration
of the DT/CSC cancel-out unit means: if a DT and a CSC muon are
matched in space and if the CSC muon is matched with an RPC muon in
its main matching unit but the DT muon is not matched with an RPC muon
in its main matching unit, then the DT muon will be cancelled.<p>

\htmlonly
<table BORDER WIDTH="100%" NOSAVE >
<tr NOSAVE>
 <td rowspan = 3 NOSAVE><b>Bit Nr / Value</b></td>
 <td rowspan = 3><b>Meaning</b></td>
 <td colspan = 4>which cancel-out unit (first/second)</td>
</tr>
<tr NOSAVE>
 <td><b>DT/CSC</b></td>
 <td><b>CSC/DT</b></td>
 <td><b>bRPC/CSC</b></td>
 <td><b>fRPC/DT</b></td>
</tr>
<tr NOSAVE>
 <td><b>brl FPGA</b></td>
 <td><b>fwd FPGA</b></td>
 <td><b>brl FPGA</b></td>
 <td><b>fwd FPGA</b></td>
</tr>
<tr NOSAVE>
 <td>0 / 1</td>
 <td>Cancel first when neither is matched</td>
 <td>-</td>
 <td>x</td>
 <td>-</td>
 <td>x</td>
</tr>
<tr NOSAVE>
 <td>1 / 2</td>
 <td>Cancel first when only second is matched</td>
 <td>x</b></td>
 <td>x</td>
 <td>-</td>
 <td>-</td>
</tr>
<tr NOSAVE>
 <td>2 / 4</td>
 <td>Cancel first when only first is matched</td>
 <td>-</td>
 <td>-</td>
 <td>-</td>
 <td>-</td>
</tr>
<tr NOSAVE>
 <td>3 / 8</td>
 <td>Cancel first when both are matched</td>
 <td>-</td>
 <td>-</td>
 <td>-</td>
 <td>-</td>
</tr>
<tr NOSAVE>
 <td>4 / 16</td>
 <td>Cancel second when neither is matched</td>
 <td>N/A</td>
 <td>N/A</td>
 <td>x</td>
 <td>-</td>
</tr>
<tr NOSAVE>
 <td>5 / 32</td>
 <td>Cancel second when only first is matched</td>
 <td>N/A</td>
 <td>N/A</td>
 <td>-</td>
 <td>-</td>
</tr>
<tr NOSAVE>
 <td>6 / 64</td>
 <td>Cancel second when only second is matched</td>
 <td>N/A</td>
 <td>N/A</td>
 <td>-</td>
 <td>-</td>
</tr>
<tr NOSAVE>
 <td>7 / 128</td>
 <td>Cancel second when both are matched</td>
 <td>N/A</td>
 <td>N/A</td>
 <td>-</td>
 <td>-</td>
</tr>
<tr NOSAVE>
 <td colspan=2><b>Default value of CDL Config word</b></td>
 <td><b>2</b></td>
 <td><b>3</b></td>
 <td><b>16</b></td>
 <td><b>1</b></td>
</tr>
</table>
\endhtmlonly



<h3>Quality code</h3>

Quality codes are sent with each muon from the L1 Global Muon Trigger
to the L1 Global Trigger. They are used in the Global Trigger in order
to include only certain qualities of candidates in certain trigger
algorithms. The current definition of the quality codes is given in
the table below. The definition may change in the future. It is
therefore saver <b>not to rely on the quality codes in the analysis code</b>
but to use the provided interpretation Methods in class L1MuGMTCand <pre>
bool useInSingleMuonTrigger();
bool useInDiMuonTrigger();
bool isMatchedCand();
bool isHaloCand();
</pre>

\htmlonly
<table BORDER WIDTH="100%" NOSAVE >
<tr NOSAVE>
 <td NOSAVE><b>Quality code</b></td>
 <td><b>Definition</b></td>
 <td><b>Intended Special Use</b></td>
</tr>
<tr>
 <td>0</td>
 <td>empty muon candidate</td>
 <td>-</td>
</tr>
<tr>
 <td>1</td>
 <td>halo muon</td>
 <td>Halo muons for alignment</td>
</tr>
<tr>
 <td>2</td>
 <td>Very Low Quality Type 1</td>
 <td>Skip in Single and di-muon trigger</td>
</tr>
<tr>
 <td>3</td>
 <td>Very Low Quality Type 2</td>
 <td>Skip in Single muon trigger</td>
</tr>
<tr>
 <td>4</td>
 <td>Very Low Quality Type 3</td>
 <td>Skip in di-muon trigger</td>
</tr>
<tr>
 <td>5</td>
 <td>RPC unconfirmed candidate</td>
 <td>-</td>
</tr>
<tr>
 <td>6</td>
 <td>DT or CSC unconfirmed candidate</td>
 <td>-</td>
</tr>
<tr>
 <td>7</td>
 <td>DT/RPC or CSC/RPC Matched candidate</td>
 <td>-</td>
</tr>
</table>
\endhtmlonly


\subsection tests Unit tests and examples
<!-- Describe cppunit tests and example configuration files -->
An EDAnayzer module L1MuGMTDump is provided in the test directory. It dumps the information from the GMT readout stored in the Event.

\section status Status and planned development
<!-- e.g. completed, stable, missing features -->
Unknown

<hr>
Last updated:
@DATE@  Author: computer-generated.
*/

