
template <class T>
ShiftingMagneticFieldProvider<T>::
ShiftingMagneticFieldProvider( const MagVolume& magvol, 
			       const MagVolume::PositionType& pos,
			       const MagVolume::RotationType& rot) :
  theFrame(pos,rot),
  theMagVolume(magvol)
{
  const float epsilon = 5.0e-7;
  LocalVectorType localZ(0,0,1);
  LocalVectorType localX(1,0,0);

  GlobalVectorType myZ( theFrame.toGlobal( localZ));
  GlobalVectorType magZ( theMagVolume.toGlobal( localZ));
  GlobalVectorType crossZ = myZ.cross(magZ);
  if (crossZ.mag() > epsilon || myZ.dot(magZ) < 0) {
    theFrameRelation = differentFrames;
  }
  else {
    GlobalVectorType myX( theFrame.toGlobal( localX));
    GlobalVectorType magX( theMagVolume.toGlobal( localX));
    GlobalVectorType crossX = myX.cross(magX);
    if (crossX.mag() > epsilon || myX.dot(magX) < 0) {
      theFrameRelation = differentFrames;
    }
    else {
      // the orientations of the two frames are identical within tolerance
      MagVolume::PositionType magpos( theMagVolume.position());
      if ( (pos - magpos).mag() > epsilon) {
	theFrameRelation = sameOrientation;
	theShift = (pos - magpos).basicVector();
      }
      else{
	theFrameRelation = sameFrame;
      }
    }
  }
}

template <class T>
typename ShiftingMagneticFieldProvider<T>::LocalVectorType
ShiftingMagneticFieldProvider<T>::valueInTesla( const LocalPointType& p) const
{
  if (theFrameRelation == sameFrame) {
    return theMagVolume.fieldInTesla(p);
  }
  else if (theFrameRelation == sameOrientation) {
    Basic3DVector<T> shiftedP = p.basicVector() + theShift;
    return theMagVolume.fieldInTesla( LocalPointType(shiftedP));
  }
  else {
    return theMagVolume.fieldInTesla( theMagVolume.toLocal( theFrame.toGlobal(p)));
  }

}
