Instructions about how to use the new scripts (starting from revision 1.28)

New scripts have been added to make the HIP execution more robust and 
to warn the usre about failures from the batch queue.
The classic scripts have been also modified in order to make them more flexible
robust and to accomodate the usage of sample-specific constraints.

The usage is till similar to the previous way, however.

The user does not specify any more the list of data sets as third input to 
the steering script (iterator_py). the third argument now is rather a text 
file with the list of the data samples themselves.
If the user wants to run on MinBias tracks and cosmics at the same time,
in the data dir she/he will prepare the two lists of ALCARECO, 
*always with the same name of the track collection she/he wants to analyze*.
This means that in HIPAlignmentAlgorithm/data/ there will be the two files
HIPAlignmentAlgorithm/data/ALCARECOTkAlMinBias.dat
HIPAlignmentAlgorithm/data/ALCARECOTkAlCosmicsCTF0T.dat

Then the user writes in a text file the names of the data lists, followed by a 
comma and a flag that characterizes them. This flag is used by the scripts 
in order to know which sample specific constraint apply. For instance,
the user may or may not want to apply the vertex constraint during the
refit of the Minbias tracks. an example of such a file is in this directory
HIPAlignmentAlgorithm/scripts/minbiascosmicsMC09.lst
Notice that if you don't have any particular preferences about the 
flag and/or if you don't know what to write, just put something like
'DUMMY', 'aLEssy0' or whatever else, it will not matter.

In order to launch the alignment with the local algorithm, one should 
create an output directory and do the following

$> mkdir myoutdir
$> scripts/iterator_py <NITERATIONS> myoutdir  scripts/minbiascosmicsMC09.lst


Template files in HIPAlignmentAlgorithm/python/

In align_tpl_py.txt there are all the ettings that are applied to all the data 
samples but that should not be used during the collector job, like the APE
values and the path of the cmsRun job. 

In common_cff_py.txt there are the general settings, like Global Tag & co.

In both of them the user can add if statements in order to include special
treatments for data sets flagged in particular ways. For example, if one
has a Z->mumu sample and wants to apply a refit to the tracks with the 
proper Z mass constraint, one can add in align_tpl_py.txt the load of themodule
that implements the mass constraint and at teh bottom the if statement

if "ZMASSCONSTRAINT" = "<FLAG>":
	process.path = cms.Path( #... the correct sequence including the module with the mass constraint)

The user should specify in the text file with the data list, after the name 
of the file with the list of ALCARECOs from the Zmumu skim and the comma, 
the flag "ZMASSCONSTRAINT", and the constraint will be actually applied.


All other settings that depend on
the sample (which refitter to use, the track and hit selection) are moved in
the files that end with "TrackSelection_cff_py.txt".

collect_tpl_py.txt has not been changed respect to the past. 

The usage new monitoring scripts are totally transparent to the user 
respect to the previous revision.

