select dbms_metadata.get_ddl('TABLE','MYTABLE_NAME') from dual;

1.          
CREATE TABLE "CMS_LUMI_PROD"."REVISIONS"
   (	"REVISION_ID" NUMBER(20,0),
	"BRANCH_ID" NUMBER(20,0),
	"NAME" VARCHAR2(56),
	"BRANCH_NAME" VARCHAR2(4000),
	"COMMENT" VARCHAR2(1024),
	"CTIME" TIMESTAMP (6),
	 CONSTRAINT "REVISIONS_PK" PRIMARY KEY ("REVISION_ID")

CREATE TABLE "CMS_LUMI_PROD"."REVISIONS_ID"
   (	"NEXTID" NUMBER(20,0),
	 CONSTRAINT "REVISIONS_ID_PK" PRIMARY KEY ("NEXTID")
 
create index revisions_branch_id on revision(branchid)

2.
CREATE TABLE "CMS_LUMI_PROD"."LUMINORMS"
   (	"DATA_ID" NUMBER(20,0),
	"ENTRY_ID" NUMBER(20,0),
	"ENTRY_NAME" VARCHAR2(56),
	"AMODETAG" VARCHAR2(28),
	"NORM_1" BINARY_FLOAT,
	"EGEV_1" NUMBER(10,0),
	"NORM_2" BINARY_FLOAT,
	"EGEV_2" NUMBER(10,0),
	 CONSTRAINT "LUMINORMS_PK" PRIMARY KEY ("DATA_ID")
    )

CREATE TABLE "CMS_LUMI_PROD"."LUMINORMS_ENTRIES"
   (	"ENTRY_ID" NUMBER(20,0),
	"REVISION_ID" NUMBER(20,0),
	"NAME" VARCHAR2(56),
	 CONSTRAINT "LUMINORMS_ENTRIES_PK" PRIMARY KEY ("ENTRY_ID")
   )

CREATE TABLE "CMS_LUMI_PROD"."LUMINORMS_ID"
   (	"NEXTID" NUMBER(20,0),
	 CONSTRAINT "LUMINORMS_ID_PK" PRIMARY KEY ("NEXTID")
   )

CREATE TABLE "CMS_LUMI_PROD"."LUMINORMS_ENTRIES_ID"
  (	"NEXTID" NUMBER(20,0),
	 CONSTRAINT "LUMINORMS_ENTRIES_ID_PK" PRIMARY KEY ("NEXTID")
  )

CREATE TABLE "CMS_LUMI_PROD"."LUMINORMS_REV"
   (	"DATA_ID" NUMBER(20,0),
	"REVISION_ID" NUMBER(20,0),
	 CONSTRAINT "LUMINORMS_REV_PK" PRIMARY KEY ("DATA_ID", "REVISION_ID")
   )

3.
CREATE TABLE "CMS_LUMI_PROD"."LUMIDATA"
   (	"DATA_ID" NUMBER(20,0),
	"ENTRY_ID" NUMBER(20,0),
	"ENTRY_NAME" VARCHAR2(56),
	"SOURCE" VARCHAR2(128),
	"RUNNUM" NUMBER(10,0),
	"NOMINALEGEV" BINARY_FLOAT,
	 CONSTRAINT "LUMIDATA_PK" PRIMARY KEY ("DATA_ID")
   )
create index lumidata_entry_id on lumidata(entry_id);

CREATE TABLE "CMS_LUMI_PROD"."LUMIDATA_ID"
   (	"NEXTID" NUMBER(20,0),
	 CONSTRAINT "LUMIDATA_ID_PK" PRIMARY KEY ("NEXTID")
)
CREATE TABLE "CMS_LUMI_PROD"."LUMIDATA_ENTRIES"
   (	"ENTRY_ID" NUMBER(20,0),
	"REVISION_ID" NUMBER(20,0),
	"NAME" VARCHAR2(56),
	 CONSTRAINT "LUMIDATA_ENTRIES_PK" PRIMARY KEY ("ENTRY_ID")
   )
CREATE TABLE "CMS_LUMI_PROD"."LUMIDATA_REV"
   (	"DATA_ID" NUMBER(20,0),
	"REVISION_ID" NUMBER(20,0),
	 CONSTRAINT "LUMIDATA_REV_PK" PRIMARY KEY ("DATA_ID", "REVISION_ID")
  )

CREATE TABLE "CMS_LUMI_PROD"."LUMIDATA_ENTRIES_ID"
   (	"NEXTID" NUMBER(20,0),
	 CONSTRAINT "LUMIDATA_ENTRIES_ID_PK" PRIMARY KEY ("NEXTID")
   )

4.
CREATE TABLE "CMS_LUMI_PROD"."CMSRUNSUMMARY"
   (	"RUNNUM" NUMBER(10,0),
	"HLTKEY" VARCHAR2(128) NOT NULL ENABLE,
	"FILLNUM" NUMBER(10,0),
	"SEQUENCE" VARCHAR2(56) NOT NULL ENABLE,
	"STARTTIME" TIMESTAMP (6),
	"STOPTIME" TIMESTAMP (6),
	"L1KEY" VARCHAR2(128),
	"AMODETAG" VARCHAR2(28),
	"EGEV" NUMBER(10,0),
	"FILLSCHEME" VARCHAR2(128),
	"NCOLLIDINGBUNCHES" NUMBER(10,0),
	 CONSTRAINT "CMSRUNSUMMARY_PK" PRIMARY KEY ("RUNNUM")
)
5. 
CREATE TABLE "CMS_LUMI_PROD"."LUMISUMMARYV2"
   (	"DATA_ID" NUMBER(20,0),
	"RUNNUM" NUMBER(10,0),
	"LUMILSNUM" NUMBER(10,0),
	"CMSLSNUM" NUMBER(10,0),
	"INSTLUMI" BINARY_FLOAT,
	"INSTLUMIERROR" BINARY_FLOAT,
	"INSTLUMIQUALITY" NUMBER(5,0),
	"BEAMSTATUS" VARCHAR2(28),
	"BEAMENERGY" BINARY_FLOAT,
	"NUMORBIT" NUMBER(10,0),
	"STARTORBIT" NUMBER(10,0),
	"CMSBXINDEXBLOB" BLOB,
	"BEAMINTENSITYBLOB_1" BLOB,
	"BEAMINTENSITYBLOB_2" BLOB,
	"BXLUMIVALUE_OCC1" BLOB,
	"BXLUMIVALUE_OCC2" BLOB,
	"BXLUMIVALUE_ET" BLOB,
	"BXLUMIERROR_OCC1" BLOB,
	"BXLUMIERROR_OCC2" BLOB,
	"BXLUMIERROR_ET" BLOB,
	"BXLUMIQUALITY_OCC1" BLOB,
	"BXLUMIQUALITY_OCC2" BLOB,
	"BXLUMIQUALITY_ET" BLOB,
	"NCOLLIDINGBUNCHES" NUMBER(10,0),
	 CONSTRAINT "LUMISUMMARYV2_PK" PRIMARY KEY ("DATA_ID", "LUMILSNUM")
)

6.
CREATE TABLE "CMS_LUMI_PROD"."TRGDATA"
   (	"DATA_ID" NUMBER(20,0),
	"ENTRY_ID" NUMBER(20,0),
	"ENTRY_NAME" VARCHAR2(56),
	"SOURCE" VARCHAR2(128),
	"RUNNUM" NUMBER(10,0),
	"BITZERONAME" VARCHAR2(56),
	"BITNAMECLOB" CLOB,
	 CONSTRAINT "TRGDATA_PK" PRIMARY KEY ("DATA_ID")
)
CREATE TABLE "CMS_LUMI_PROD"."TRGDATA_REV"
   (	"DATA_ID" NUMBER(20,0),
	"REVISION_ID" NUMBER(20,0),
	 CONSTRAINT "TRGDATA_REV_PK" PRIMARY KEY ("DATA_ID", "REVISION_ID")
)
create table trgdata_entries(       
     entry_id    uint64 not null	     ,
     revision_id uint64 not null references revisions(revision_id),
     name    string  (56)	 
)
create table trgdata_id(             #id helper table
     nextid uint64 PK
)
create table trgdata_entries_id(       #id helper table
     nextid uint64 PK
)
7.
CREATE TABLE "CMS_LUMI_PROD"."LSTRG"
   (	"DATA_ID" NUMBER(20,0),
	"RUNNUM" NUMBER(10,0),
	"CMSLSNUM" NUMBER(10,0),
	"DEADTIMECOUNT" NUMBER(20,0),
	"BITZEROCOUNT" NUMBER(10,0),
	"BITZEROPRESCALE" NUMBER(10,0),
	"DEADFRAC" BINARY_FLOAT,
	"PRESCALEBLOB" BLOB,
	"TRGCOUNTBLOB" BLOB,
	 CONSTRAINT "LSTRG_PK" PRIMARY KEY ("DATA_ID", "CMSLSNUM")
 )

8.
CREATE TABLE "CMS_LUMI_PROD"."HLTDATA"
   (	"DATA_ID" NUMBER(20,0),
	"ENTRY_ID" NUMBER(20,0),
	"ENTRY_NAME" VARCHAR2(56),
	"RUNNUM" NUMBER(10,0),
	"SOURCE" VARCHAR2(128),
	"NPATH" NUMBER(10,0),
	"PATHNAMECLOB" CLOB,
	 CONSTRAINT "HLTDATA_PK" PRIMARY KEY ("DATA_ID")
)

CREATE TABLE "CMS_LUMI_PROD"."HLTDATA_ENTRIES"
   (	"ENTRY_ID" NUMBER(20,0),
	"REVISION_ID" NUMBER(20,0),
	"NAME" VARCHAR2(56),
	 CONSTRAINT "HLTDATA_ENTRIES_PK" PRIMARY KEY ("ENTRY_ID")
)

create table hltdata_id(         
     nextid uint64 PK
)
create table hltdata_entries_id(     
     nextid uint64 PK
)
create table hltdata_rev(   
    data_id uint64 not null references hltdata(data_id),
    revision_id uint64 not null references revisions(revision_id) 
    (data_id,revision_id) PK 
)
9.
create table lshlt(         
   data_id uint64 not null references hltdata(data_id),
   runnum   uint32 not null,
   cmslsnum uint32 not null,
   prescaleblob blob,
   hltcountblob    blob,
   hltacceptblob     blob
   (data_id,cmslsnum) PK
)
10.
create table trghltmap(           
   hltkey string(128) not null,
   hltpathname string(256) not null,
   l1seed      string(1024) not null
   (hltkey,hltpathname,l1seed) PK
)
11.
create table lumivalidation(      
   runnum uint32 not null,
   cmslsnum uint32 not null,
   flag string, (28)
   comment string (1024)
)
12
create table FILLSCHEME (
   fillscheme_id(uint64),        PK
   fillschemepattern(string),    NOT NULL (128)
   correctionfactor(float),      NOT NULL
)

create table INTGLUMI(
  intglumi_id uint64 PK,    
  runnum uint32 not null,
  startrun uint32,
  intglumi float
)
create table INTGLUMI(RUNNUM NUMBER(10),STARTRUN NUMBER(10), INTGLUMI BINARY_FLOAT , constraint PK_INTGLUMI primary key(RUNNUM,STARTRUN));
