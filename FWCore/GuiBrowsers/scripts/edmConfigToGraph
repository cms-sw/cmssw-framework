#!/usr/bin/env python

import os
import sys
from optparse import OptionParser, OptionGroup

try:
    distBaseDirectory=os.path.abspath(os.path.join(os.path.dirname(__file__),".."))
    if not os.path.exists(distBaseDirectory) or not "Vispa" in os.listdir(distBaseDirectory):
        distBaseDirectory=os.path.abspath(os.path.join(os.path.dirname(__file__),"../python"))
    if not os.path.exists(distBaseDirectory) or not "Vispa" in os.listdir(distBaseDirectory):
        distBaseDirectory=os.path.abspath(os.path.expandvars("$CMSSW_BASE/python/FWCore/GuiBrowsers"))
    if not os.path.exists(distBaseDirectory) or not "Vispa" in os.listdir(distBaseDirectory):
        distBaseDirectory=os.path.abspath(os.path.expandvars("$CMSSW_RELEASE_BASE/python/FWCore/GuiBrowsers"))
except Exception:
    distBaseDirectory=os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),".."))

sys.path.append(distBaseDirectory)

from Vispa.Plugins.ConfigEditor.ConfigDataAccessor import ConfigDataAccessor
from FWCore.GuiBrowsers.DOTExport import DotExport
import os.path
import sys

"""
Command line tool for the DOTExport mode of GuiBrowser

gfball
"""
if not 'graphviz' in os.getenv('PATH'):
  print "#### WARNING ####"
  print "It looks like you don't have graphviz in your PATH."
  print "This is not added automatically for CMSSW 3.x."
  print "This can be sourced from AFS by doing:"
  print "source /afs/cern.ch/cms/sw/$SCRAM_ARCH/external/graphviz/2.16.1-cms2/etc/profile.d/init.sh     (or .csh)"
  print

parser = OptionParser(usage='Usage: %prog [options] file_cfg.py')

g1 = OptionGroup(parser,"Basic Options")

g1.add_option('-f','--format',dest='filetype',help='Output format to use (eg png, pdf, dot).',type='string',default='png',metavar='FORMAT')
g1.add_option('-n','--name',dest='name',help='Name to use for output file(s). Defaults config_cfg.(format).',type='string',default=None,metavar='NAME')

g2 = OptionGroup(parser,"Graph Options")


g2.add_option('--connect-tags',dest='tagconnect',type='int',default=True,metavar='1/0',help='Connect InputTags')
g2.add_option('--connect-order',dest='seqconnect',type='int',default=False,metavar='1/0',help='Connect in sequence order')
g2.add_option('--group-sequences',dest='seq',type='int',default=True,metavar='1/0',help='Group sequences')
g2.add_option('--class-names',dest='class_names',type='int',default=True,metavar='1/0',help='Include class names in modules'),
g2.add_option('--file-names',dest='file_names',type='int',default=True,metavar='1/0',help='Include file names in modules'),
g2.add_option('--legend',dest='legend',type='int',default=False,metavar='1/0',help='Draw legend')
g2.add_option('--source',dest='source',type='int',default=False,metavar='1/0',help='Include source')
g2.add_option('--endpaths',dest='endpath',type='int',default=False,metavar='1/0',help='Include EndPaths')
g2.add_option('--local',dest='local',default=None,metavar='MODULE_NAME DEPTH',nargs=2,help='Only draw modules within DEPTH of MODULE_NAME')
g2.add_option('--backtrace',dest='backtrace',default=None,metavar='MODULE_NAME',help='Only draw nodes connected to and before MODULE_NAME')
g2.add_option('--font',dest='font_name',default='Times-Roman',metavar='FONT',help='Use FONT for drawing')
g2.add_option('--font-size',dest='font_size',default=8,type='int',metavar='SIZE',help='Use font SIZE for drawing')

g3 = OptionGroup(parser,"DOTBatch Options","Use at your own risk")

g3.add_option('-o','--opts',dest='opts',help='Raw options for DotExport.',type='string',metavar='opt1:val1,opt2:val2',default=None)
g3.add_option('--max-size',dest='max_size',help='Maximum image width/height. Only works for PNG.', type='int',metavar='PX',default=16768)
g3.add_option('--list',dest='list',default=False,action='store_true',help='Print a list of all options understood by DOTExport')

parser.add_option_group(g1)
parser.add_option_group(g2)
parser.add_option_group(g3)

(options,args)=parser.parse_args()

dot = DotExport()

if options.list:
  print "DOTExport Option List"
  print "Name\tDescription\tType\tDefault"
  for opt,val in dot.option_types.items():
    print "%s\t%s\t%s\t%s" % (opt,val[0],val[1],val[2])
  sys.exit(0)

options.filetype
if not options.filetype in dot.file_types:
  print "Filetype %s is not understood by DOTExport" % options.filetype
  print "Known filetypes are:"
  for f in dot.file_types:
    print "\t%s"%f
  sys.exit(0)
  
if not len(args)>0:
  print "No config files specified. Please specify one."
  
dot.setOption('tagconnect',bool(options.tagconnect))
dot.setOption('seqconnect',bool(options.seqconnect))
dot.setOption('seq',bool(options.seq))
dot.setOption('class',bool(options.class_names))
dot.setOption('file',bool(options.file_names))
dot.setOption('legend',bool(options.legend))
dot.setOption('source',bool(options.source))
dot.setOption('endpath',bool(options.endpath))
dot.setOption('png_max_size',options.max_size)

if options.local:
  dot.setOption('node_graphs',True)
  dot.setOption('node_graphs_restrict',options.local[0])
  dot.setOption('node_depth',int(options.local[1]))

if options.backtrace:
  dot.setOption('node_graphs',True)
  dot.setOption('node_graphs_restrict',options.backtrace)
  dot.setOption('node_depth',-45000000000) # This is the largest number, although scientists have theorised that even larger numbers may exist

dot.setOption('font_name',options.font_name)
dot.setOption('font_size',options.font_size)

if options.opts:
  for o in options.opts.split(','):
    if ':' in o:
      opt,val = o.split(':',1)
      dot.setOption(opt,eval(val))

for arg in args:
  cfgfile = args[0]
  if not options.name:
    options.name = os.path.basename(cfgfile).rsplit('.',1)[0] + '.' + options.filetype
  if not os.path.exists(cfgfile):
    print "File does not exist: %s" % cfgfile
    sys.exit(0)
    
  data = ConfigDataAccessor()
  data.open(cfgfile)

  dot.export(data,options.name,options.filetype)
