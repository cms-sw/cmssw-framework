{
  cout << "macro geo_el: check geometry (and energy loss)" << endl;
  gROOT->Reset();
  gROOT->LoadMacro("GeneratorInterface/CosmicMuonGenerator/src/SingleParticleEvent.cc");

  double PlugVx = PlugOnShaftVx;	
  double PlugVz = PlugOnShaftVz;	
  //double PlugVz = -33000.; //[mm]	

   int colVec[6] = {0000,2222, 8888, 1111, 9999, 4444};
	

  gStyle->SetPalette(6,colVec);
  

  //////////////////////////////////////////////////////////////////////////////////////
  TCanvas *C1 = new TCanvas("densities","Densities",10,10,250,250);
  C1->SetBottomMargin(0.15);
  C1->Divide(1,1);
  C1->cd(1); //gPad->SetTicks(1,1);
  TH2F* col = new TH2F("col","col",5, 0.55, 5.55, 5, 0.5, 5.5);
  col->Fill(1, 1, 3);
  col->Fill(1, 2, 4);
  col->Fill(1, 3, 5);
  col->Fill(1, 4, 2);
  col->Fill(1, 5, 1);
  col->SetMinimum(0);		
  col->SetMaximum(6);		
  col->Draw("COLAH");	

  TLatex* line = new TLatex(1.7, 5.0, "Plug  #rho=6.3 g/cm^{3}");
  line->SetTextSize(0.075);	
  line->Draw();
  TLatex* line = new TLatex(1.7, 4.0, "Concrete  #rho=2.5 g/cm^{3}");
  line->SetTextSize(0.075);	
  line->Draw();
  TLatex* line = new TLatex(1.7, 3.0, "Rock  #rho=2.2 g/cm^{3}");
  line->SetTextSize(0.075);	
  line->Draw();
  TLatex* line = new TLatex(1.7, 2.0, "Clay  #rho=1.5 g/cm^{3}");
  line->SetTextSize(0.075);	
  line->Draw();
  TLatex* line = new TLatex(1.7, 1.0, "Air  #rho=0.0 g/cm^{3}");
  line->SetTextSize(0.075);	
  line->Draw();


  gPad->Update();



  // scan geometry
  //////////////////////////////////////////////////////////////////////////////////////
  TH2D* zyv = new TH2D("zyv","Z-Y view at X=0",500,-65.,35.,600,-20.,100.);
  double vx = 0.;
  for (int iz=0; iz<500; ++iz){
    double vz = double(iz)*0.2 - 64.9;
    for (int iy=0; iy<600; ++iy){
      double vy = double(iy)*0.2 - 19.9;
  	 zyv->Fill(float(vz),float(vy), inMat(vx*1000.,vy*1000.,vz*1000., PlugVx, PlugVz));	
	
   }	
  }	
  TCanvas *C1 = new TCanvas("zy_view","Z-Y view at X=0",50,50,440,550);
  C1->SetBottomMargin(0.15);
  C1->Divide(1,1);
  C1->cd(1); gPad->SetTicks(1,1);
  zyv->SetMinimum(0);		
  zyv->SetMaximum(6);		
  zyv->Draw("COL");
  zyv->GetXaxis()->SetLabelSize(0.035);
  zyv->GetXaxis()->SetTitleSize(0.035);
  zyv->GetXaxis()->SetTitleOffset(1.5);
  zyv->GetXaxis()->SetTitle("Z [m]");
  zyv->GetXaxis()->SetLabelOffset(0.001);
  zyv->GetYaxis()->SetLabelSize(0.035);
  zyv->GetYaxis()->SetTitleSize(0.035);
  zyv->GetYaxis()->SetTitleOffset(2.0);
  zyv->GetYaxis()->SetTitle("Y [m]");
  gPad->Update();

  //////////////////////////////////////////////////////////////////////////////////////
  TH2D* xyv1 = new TH2D("xyv1","X-Y view at Z=-38",250,-20.,30.,600,-20.,100.);
  double vz = -38.227;
  for (int ix=0; ix<250; ++ix){
    double vx = double(ix)*0.2 - 19.9;
    for (int iy=0; iy<600; ++iy){
      double vy = double(iy)*0.2 - 19.9;
	xyv1->Fill(float(vx),float(vy),inMat(vx*1000.,vy*1000.,vz*1000., PlugVx, PlugVz));
    }
  }
  TCanvas *C2 = new TCanvas("xy_view1","X-Y view at Z=-38",500,50,220,550);
  C2->SetBottomMargin(0.15);
  C2->SetLeftMargin(0.15);
  C2->Divide(1,1);
  C2->cd(1); gPad->SetTicks(1,1);
  gPad->SetLeftMargin(0.15);	
  gPad->SetLeftMargin(0.2);	
  xyv1->SetMinimum(0);
  xyv1->SetMaximum(6);
  xyv1->Draw("COL");
  xyv1->GetXaxis()->SetLabelSize(0.07);
  xyv1->GetXaxis()->SetTitleSize(0.055);
  xyv1->GetXaxis()->SetTitleOffset(0.8);
  xyv1->GetXaxis()->SetTitle("X [m]");
  xyv1->GetXaxis()->SetLabelOffset(-0.022);
  xyv1->GetYaxis()->SetLabelSize(0.07);
  xyv1->GetYaxis()->SetTitleSize(0.055);
  xyv1->GetYaxis()->SetTitleOffset(1.9);
  xyv1->GetYaxis()->SetTitle("Y [m]");
  gPad->Update();

  //////////////////////////////////////////////////////////////////////////////////////
  TH2D* xyv2 = new TH2D("xyv2","X-Y view at Z=15",300,-20.,40.,600,-20.,100.);
  double vz = 15.;
  for (int ix=0; ix<300; ++ix){
    double vx = double(ix)*0.2 - 19.9;
    for (int iy=0; iy<600; ++iy){
      double vy = double(iy)*0.2 - 19.9;
	xyv2->Fill(float(vx),float(vy),inMat(vx*1000.,vy*1000.,vz*1000., PlugVx, PlugVz));	
    }
  }
  TCanvas *C3 = new TCanvas("xy_view2","X-Y view at Z=14",730,50,270,550);
  C3->SetBottomMargin(0.15);
  C3->Divide(1,1);
  C3->cd(1); gPad->SetTicks(1,1);
  gPad->SetLeftMargin(0.2);	
  xyv2->SetMinimum(0);
  xyv2->SetMaximum(6);
  xyv2->Draw("COL");
  xyv2->GetXaxis()->SetLabelSize(0.06);
  xyv2->GetXaxis()->SetTitleSize(0.055);
  xyv2->GetXaxis()->SetTitleOffset(0.7);
  xyv2->GetXaxis()->SetTitle("X [m]");
  xyv2->GetXaxis()->SetLabelOffset(-0.022);
  xyv2->GetYaxis()->SetLabelSize(0.06);
  xyv2->GetYaxis()->SetTitleSize(0.055);
  xyv2->GetYaxis()->SetTitleOffset(1.7);
  xyv2->GetYaxis()->SetTitle("Y [m]");
  gPad->Update();

  //////////////////////////////////////////////////////////////////////////////////////
  TH2D* xzv1 = new TH2D("xzv1","X-Z view at Y=0",350,-20.,50.,675,-65.,70.);
  double vy = 0.;
  for (int ix=0; ix<350; ++ix){
    double vx = double(ix)*0.2 - 19.9;
    for (int iz=0; iz<675; ++iz){
      double vz = double(iz)*0.2 - 64.9;
	xzv1->Fill(float(vx),float(vz),inMat(vx*1000.,vy*1000.,vz*1000., PlugVx, PlugVz));	
    }
  }	
  TCanvas *C4 = new TCanvas("xz_view1","X-Z view at Y=0",150,500,250,480);
  C4->SetBottomMargin(0.15);
  //C4->SetLeftMargin(3.15);
  C4->Divide(1,1);
  C4->cd(1); gPad->SetTicks(1,1);
  gPad->SetLeftMargin(0.2);	

  xzv1->SetMinimum(0); //needed to get right color interval
  xzv1->SetMaximum(6);	//needed to get right color interval
  xzv1->Draw("COL");
  xzv1->GetXaxis()->SetLabelSize(0.07);
  xzv1->GetXaxis()->SetTitleSize(0.055);
  xzv1->GetXaxis()->SetTitleOffset(0.8);
  xzv1->GetXaxis()->SetTitle("X [m]");
  xzv1->GetXaxis()->SetLabelOffset(-0.022);
  xzv1->GetYaxis()->SetLabelSize(0.07);
  xzv1->GetYaxis()->SetTitleSize(0.055);
  xzv1->GetYaxis()->SetTitleOffset(1.7);
  xzv1->GetYaxis()->SetTitle("Z [m]");
  gPad->Update();

  //////////////////////////////////////////////////////////////////////////////////////
  TH2D* xzv2 = new TH2D("xzv2","X-Z view at Y=50",275,-20.,35.,500,-70.,30.);
  double vy = 50.;
  for (int ix=0; ix<275; ++ix){
    double vx = double(ix)*0.2 - 19.9;
    for (int iz=0; iz<500; ++iz){
      double vz = double(iz)*0.2 - 69.9;
	xzv2->Fill(float(vx),float(vz),inMat(vx*1000.,vy*1000.,vz*1000., PlugVx, PlugVz));
    }
  }
  TCanvas *C5 = new TCanvas("xz_view2","X-Z view at Y=50",360,500,230,460);
  C5->SetBottomMargin(0.15);
  C5->Divide(1,1);
  C5->cd(1); gPad->SetTicks(1,1);
  xzv2->SetMinimum(0); //needed to get right color interval
  xzv2->SetMaximum(6);	//needed to get right color interval
  xzv2->Draw("COL");
  xzv2->GetXaxis()->SetLabelSize(0.055);
  xzv2->GetXaxis()->SetTitleSize(0.055);
  xzv2->GetXaxis()->SetTitleOffset(0.4);
  xzv2->GetXaxis()->SetTitle("X [m]");
  xzv2->GetXaxis()->SetLabelOffset(-0.022);
  xzv2->GetYaxis()->SetLabelSize(0.055);
  xzv2->GetYaxis()->SetTitleSize(0.055);
  xzv2->GetYaxis()->SetTitleOffset(1.3);
  xzv2->GetYaxis()->SetTitle("Z [m]");
  gPad->Update();

  //////////////////////////////////////////////////////////////////////////////////////
  TH2D* xzv3 = new TH2D("xzv3","X-Z view at Y=surf.",275,-20.,35.,500,-50.,50.);
  double vy = 88.87;
  for (int ix=0; ix<275; ++ix){
    double vx = double(ix)*0.2 - 19.9;
    for (int iz=0; iz<500; ++iz){
      double vz = double(iz)*0.2 - 49.9;
	xzv3->Fill(float(vx),float(vz),inMat(vx*1000.,vy*1000.,vz*1000., PlugVx, PlugVz));
    }
  }
  TCanvas *C6 = new TCanvas("xz_view3","X-Z view at Y=surf.",600,500,250,480);
  C6->SetBottomMargin(0.15);
  C6->Divide(1,1);
  C6->cd(1); gPad->SetTicks(1,1);
  xzv3->SetMinimum(1.);
  xzv3->SetMinimum(0.); //needed to get right color interval
  xzv3->SetMaximum(5.5);	//needed to get right color interval
  xzv3->Draw("COL");
  xzv3->GetXaxis()->SetLabelSize(0.055);
  xzv3->GetXaxis()->SetTitleSize(0.055);
  xzv3->GetXaxis()->SetTitleOffset(0.4);
  xzv3->GetXaxis()->SetTitle("X [m]");
  xzv3->GetXaxis()->SetLabelOffset(-0.022);
  xzv3->GetYaxis()->SetLabelSize(0.055);
  xzv3->GetYaxis()->SetTitleSize(0.055);
  xzv3->GetYaxis()->SetTitleOffset(1.3);
  xzv3->GetYaxis()->SetTitle("Z [m]");
  gPad->Update();

  //////////////////////////////////////////////////////////////////////////////////////
  TH2D* xzv4 = new TH2D("xzv3","X-Z view at Y=surf.+1m",200,-20.,20.,450,-45.,45.);
  double vy = 88.87+1.00;
  for (int ix=0; ix<200; ++ix){
    double vx = double(ix)*0.2 - 19.9;
    for (int iz=0; iz<450; ++iz){
      double vz = double(iz)*0.2 - 44.9;
	xzv4->Fill(float(vx),float(vz),inMat(vx*1000.,vy*1000.,vz*1000., PlugVx, PlugVz));
    }
  }
  TCanvas *C7 = new TCanvas("xz_view4","X-Z view at Y=surf.",860,500,180,410);
  C7->SetBottomMargin(0.15);
  C7->Divide(1,1);
  C7->cd(1); gPad->SetTicks(1,1);
  xzv4->SetMinimum(0.); //needed to get right color interval
  xzv4->SetMaximum(5.5);	//needed to get right color interval
  xzv4->Draw("COL");
  xzv4->GetXaxis()->SetLabelSize(0.055);
  xzv4->GetXaxis()->SetTitleSize(0.055);
  xzv4->GetXaxis()->SetTitleOffset(0.4);
  xzv4->GetXaxis()->SetTitle("X [m]");
  xzv4->GetXaxis()->SetLabelOffset(-0.022);
  xzv4->GetYaxis()->SetLabelSize(0.055);
  xzv4->GetYaxis()->SetTitleSize(0.055);
  xzv4->GetYaxis()->SetTitleOffset(1.3);
  xzv4->GetYaxis()->SetTitle("Z [m]");
  gPad->Update();

  //////////////////////////////////////////////////////////////////////////////////////
/*
  // check energy loss
  SingleParticleEvent TestEvt;
  int id = 13;
  double E = 100.;
  double Px = 0.;
  double Py = -sqrt(E*E - MuonMass*MuonMass);
  double Pz = 0.;
  double Vy = SurfaceOfEarth;
  double T0 = 0.;

  TH2D* exz = new TH2D("exz","X-Z view of E underground",80,-8.,8.,75,-15.,15.);
  for (int ix=0; ix<80; ++ix){
    double Vx = double(ix)/5. - 7.9;
    for (int iz=0; iz<75; ++iz){
      double Vz = double(iz)/2.5 - 14.8;
      TestEvt.create(id, Px, Py, Pz, E, MuonMass, (Vx*1000.), Vy, (Vz*1000.), T0);
      TestEvt.propagate(1.0, 8000., 15000., false, false);
      if (TestEvt.hitTarget()) exz->Fill(float(Vx),float(Vz),float(TestEvt.e()));
    }
  }
  TCanvas *C7 = new TCanvas("el_xz","X-Z of E underground",111,111,400,400);
  C7->SetBottomMargin(0.15);
  C7->Divide(1,1);
  C7->cd(1); gPad->SetTicks(1,1);
  exz->Draw("LEGO");
  exz->GetXaxis()->SetLabelSize(0.055);
  exz->GetXaxis()->SetTitleSize(0.055);
  exz->GetXaxis()->SetTitleOffset(1.1);
  exz->GetXaxis()->SetTitle("X [m]");
  exz->GetYaxis()->SetLabelSize(0.055);
  exz->GetYaxis()->SetTitleSize(0.055);
  exz->GetYaxis()->SetTitleOffset(1.5);
  exz->GetYaxis()->SetTitle("Z [m]");
  exz->GetZaxis()->SetLabelSize(0.055);
  exz->GetZaxis()->SetTitleSize(0.055);
  exz->GetZaxis()->SetTitleOffset(1.2);
  exz->GetZaxis()->SetTitle("E_{underground} [GeV]");
  gPad->Update();

  //////////////////////////////////////////////////////////////////////////////////////
  TH2D* eth = new TH2D("eth","E_surf. vs. theta",100,0.,1000.,90,0.,90.);
  for (int it=0; it<90; ++it){
    double Theta = double(it) + 0.5; // [deg]
    double ThRad = Theta*Deg2Rad;    // [rad]
    double Vz = SurfaceOfEarth*tan(ThRad);
    for (int ie=0; ie<100; ++ie){
      E = double(ie)*10. + 5.;
      double P = sqrt(E*E - MuonMass*MuonMass);
      Py = -P*cos(ThRad);
      Pz = -P*sin(ThRad);
      TestEvt.create(id, Px, Py, Pz, E, MuonMass, 0., Vy, Vz, T0);
      TestEvt.propagate(1.0, 8000., 15000., false, false);
      if (TestEvt.hitTarget()) eth->Fill(float(E),float(Theta));
    }
  }
  TCanvas *C8 = new TCanvas("e_the","E surface vesrus theta",222,222,400,400);
  C8->SetBottomMargin(0.15);
  C8->Divide(1,1);
  C8->cd(1); gPad->SetTicks(1,1);
  eth->Draw("COL");
  eth->GetXaxis()->SetLabelSize(0.05);
  eth->GetXaxis()->SetTitleSize(0.05);
  eth->GetXaxis()->SetTitleOffset(0.9);
  eth->GetXaxis()->SetTitle("E_{surface} [GeV]");
  eth->GetYaxis()->SetLabelSize(0.05);
  eth->GetYaxis()->SetTitleSize(0.05);
  eth->GetYaxis()->SetTitleOffset(0.9);
  eth->GetYaxis()->SetTitle("#vartheta [#circ]");
  gPad->Update();
*/
}
