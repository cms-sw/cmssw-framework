import FWCore.ParameterSet.Config as cms

process = cms.Process("MULTI")

process.load("Geometry.CMSCommonData.cmsIdealGeometryXML_cfi")
process.load("Geometry.TrackerGeometryBuilder.trackerGeometry_cfi")
process.load("Geometry.TrackerNumberingBuilder.trackerNumberingGeometry_cfi")
process.load('Configuration/StandardSequences/MagneticField_38T_cff')
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
process.load("RecoTracker.TrackProducer.RefitterWithMaterial_cff")

process.source = cms.Source("PoolSource",
   fileNames = cms.untracked.vstring(
   '/store/data/BeamCommissioning08/Cosmics/RECO/v1/000/062/966/B4EC2E1D-6984-DD11-9C9D-000423D174FE.root'
  )
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(10)
)

process.MessageLogger = cms.Service("MessageLogger",
    suppressWarning   = cms.untracked.vstring('TrackRefitter',         'FwkReport'),
    suppressInfo      = cms.untracked.vstring('TrackRefitter'   ,         'FwkReport'),
    suppressDebug     = cms.untracked.vstring('TrackRefitter'  ,         'FwkReport'),
    cout = cms.untracked.PSet(
        threshold = cms.untracked.string('ERROR')
    ),
    destinations = cms.untracked.vstring('cout')
)

# Conditions (Global Tag is used here):
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
process.GlobalTag.connect = "frontier://PromptProd/CMS_COND_21X_GLOBALTAG"
process.GlobalTag.globaltag = "CRUZET4_V4P::All"
process.prefer("GlobalTag")

from CondCore.DBCommon.CondDBSetup_cfi import *
GlobalTag = cms.ESSource("PoolDBESSource",
    CondDBSetup,
    connect          = cms.string('sqlite_file:Gain_MinBias.db'),
#    timetype         = cms.string('runnumber'),

    globaltag        = cms.string('IDEAL_V1::All'),
    BlobStreamerName = cms.untracked.string('TBufferBlobStreamingService'),

    toGet            = cms.PSet(
                           record = cms.string("SiStripApvGainRcd"),
			   tag    = cms.string("Gain_MinBias")
                       )
)

#es_source MySiStripApvGain = PoolDBESSource {
#    VPSet toGet = {{ string record = "SiStripApvGainRcd" string tag = "Gain_MinBias" }}
#    string connect  = "sqlite_file:Gain_MinBias.db"
#    string timetype = "runnumber"
#
#    untracked string BlobStreamerName = "TBufferBlobStreamingService"
#    PSet DBParameters = {
#        untracked string authenticationPath =""
#        untracked int32 messageLevel        =0
#    }
#}


siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False),
    NormalizationFactor = cms.double(1.0),
    AutomaticNormalization = cms.bool(False),
    APVGain = cms.string('')
)
process.prefer("siStripGainESProducer")



process.TrackRefitter.src = 'ctfWithMaterialTracksP5'
process.TrackRefitter.TrajectoryInEvent = True

process.SiStripCalib = cms.EDFilter("SiStripGainFromData",
    AlgoMode            = cms.string('MultiJob'),

    OutputHistos        = cms.string('XXX_OUTPUT_XXX.root'),
    OutputGains         = cms.string('XXX_OUTPUT_XXX.txt'),

    TrajToTrackProducer = cms.string('TrackRefitter'),
    TrajToTrackLabel    = cms.string(''),

    minTrackMomentum    = cms.untracked.double(1.0),
    minNrEntries        = cms.untracked.uint32(100),
    maxChi2OverNDF      = cms.untracked.double(9999999.0),
    maxMPVError         = cms.untracked.double(1000000.0),
    maxNrStrips         = cms.untracked.uint32(8),

    SinceAppendMode     = cms.bool(True),
    IOVMode             = cms.string('Job'),
    Record              = cms.string('SiStripApvGainRcd'),
    doStoreOnDB         = cms.bool(False)
)

process.p = cms.Path(process.TrackRefitter*process.SiStripCalib)

