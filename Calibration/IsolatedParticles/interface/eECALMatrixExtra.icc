#include "Calibration/IsolatedParticles/interface/FindCaloHit.h"
#include "Calibration/IsolatedParticles/interface/FindEtaPhi.h"
#include<iostream>

namespace spr{

  template <typename T>
  double eECALmatrix(CaloNavigator<DetId>& navigator,edm::Handle<T>& hits, int ieta, int iphi, const EcalSeverityLevelAlgo * sevlv, bool debug) {
	
    std::vector< typename T::const_iterator> hit;
    spr::hitECALmatrix(navigator,hits,ieta,iphi,hit,debug);
 
    if (debug) {
      std::cout << "Inside eECALmatrix " << 2*ieta+1 << "X" << 2*iphi+1 << std::endl;
      std::cout << "nXtals " << hit.size();
      for (unsigned int ihit=0; ihit<hit.size(); ihit++) 
        std::cout <<" ihit:" << ihit << " " << (unsigned int)hit[ihit]->id();
      std::cout << "\n" << std::endl;
    }

    double energySum = 0.0;
    for (unsigned int ihit=0; ihit<hit.size(); ihit++) {
      energySum += hit[ihit]->energy();
    }
    return energySum;
  }

  template< typename T>
  std::vector<std::pair<DetId,double> > eECALmatrixCell(const DetId& detId, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, const CaloGeometry* geo, const CaloTopology* caloTopology, int ieta, int iphi, double ebThr, double eeThr, bool debug) {

    std::vector<DetId> vdets = spr::matrixECALIds(detId, ieta, iphi, geo, caloTopology, debug);

    if (debug) {
      std::cout << "Inside eECALmatrixCell " << 2*ieta+1 << "X" << 2*iphi+1
                << " nXtals " << vdets.size() << std::endl;
   }

   return spr::energyECALCell(vdets, hitsEB, hitsEE, ebThr, eeThr, debug);
  }

  template< typename T>
  std::pair<double,int> eECALmatrixTotal(const DetId& detId, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, const CaloGeometry* geo, const CaloTopology* caloTopology, int ieta, int iphi, double ebThr, double eeThr, double tMin, double tMax, bool debug) {

    spr::EtaPhi etaphi = spr::getEtaPhi(ieta,iphi,debug);

    // Get maximum of all the trials
    double energySum = 0;
    int    itrym = 0;
    for (int itry=0; itry<etaphi.ntrys; itry++) {
      std::vector<DetId> vdets = spr::matrixECALIds(detId, etaphi.ietaE[itry], etaphi.ietaW[itry], etaphi.iphiN[itry], etaphi.iphiS[itry], geo, caloTopology, debug);
      double energy = spr::energyECAL(vdets, hitsEB, hitsEE, ebThr, eeThr, tMin, tMax, debug);
      if (energy > energySum) {
	energySum = energy;
	itrym     = itry;
      }
    }

    if (debug) std::cout << "eECALmatrixTotal:: energy deposit in " << ieta << "X" << iphi << " matrix is " << energySum << " for trial # " << itrym << std::endl;
    return std::pair<double,int>(energySum,itrym);
  }

  template <typename T>
  std::vector<std::pair<DetId,double> > energyECALCell(std::vector<DetId>& vdets, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, double ebThr, double eeThr, bool debug) {

    std::vector<std::pair<DetId,double> > energyDets;
    for (unsigned int i1=0; i1<vdets.size(); i1++) {
      double energySum = 0.0;
      if (vdets[i1] != DetId(0)) {
	std::vector< typename T::const_iterator> hit;
        if (vdets[i1].subdetId()==EcalBarrel) {
          hit = spr::findHit(hitsEB,vdets[i1]);
        } else if (vdets[i1].subdetId()==EcalEndcap) {
          hit = spr::findHit(hitsEE,vdets[i1]);
        }
        if (debug) std::cout << "Xtal 0x" <<std::hex << vdets[i1]() <<std::dec;
	bool   ok=false;
	double ethr=ebThr;
  	for (unsigned int ihit=0; ihit<hit.size(); ihit++) {
	  double en = 0;
          if (vdets[i1].subdetId()==EcalBarrel) {
            if (hit[ihit] != hitsEB->end()) {
              en = hit[ihit]->energy(); ok = true;
            }
          } else if (vdets[i1].subdetId()==EcalEndcap) {
            if (hit[ihit] != hitsEE->end()) {
              en = hit[ihit]->energy(); ok = true; ethr = eeThr;
            }
          }
          if (debug) std::cout << " " << ihit << " " << en;
  	  energySum += en;
        }
        if (debug) std::cout << "\nenergyECALCell: energySum = " <<energySum << "\n";
	if (ok && energySum>ethr) energyDets.push_back(std::pair<DetId,double>(vdets[i1],energySum));
      }
    }
    return energyDets;
  }

}


