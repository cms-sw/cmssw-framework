#!/usr/bin/env python
import os
from ConfigParser import ConfigParser
from copy import copy
from optparse import OptionParser, Option, OptionValueError
import coral
from CondCore.TagCollection import Node,tagInventory,TagTree,connectstrParser,cacheconfigParser

def update_frontier_connection(conn_str):
    '''updates frontier connection with proxy server information'''
    parser=connectstrParser.connectstrParser(conn_str)
    parser.parse()
    if parser.needsitelocalinfo():
        sitelocalconfig = os.environ.get('$CMS_PATH', '/afs/cern.ch/cms/' ) + "SITECONF/CERN/JobConfig/site-local-config.xml"
        frontierparser=cacheconfigParser.cacheconfigParser()
        frontierparser.parse(sitelocalconfig)
        #print "full frontier string: " + str(parser.fullfrontierStr(parser.schemaname(),frontierparser.parameterdict()))
        return str(parser.fullfrontierStr(parser.schemaname(),frontierparser.parameterdict())) #str because default unicode
    return str(conn_str)

class tagTreePrinter:
    def __init__(self):
        """
        Class print/list tag tree
        usage: %prog [options]
        -c, --connect=connectstring: connection string to the tag DB (required)
        -u, --user=user: user name
        -p, --password=password: password
        -P, --path=path: path to authentication.xml
        -a, --all: print overview of all trees (default)
        -T, --tree=treename: name of the tree. Note: the tree name is case insensitive, it is always internally converted to uppercase.
        -l, --leaf: print only leaf nodes
        -n, --node: root node of the branch to print
        -v, --verbose: switch on verbose mode
        -h, --help: print usage
        """
        self.__parser=OptionParser()
        self.__connectstring=''
        self.__user=''
        self.__password=''
        self.__authpath='.'
        self.__node=''
        self.__leafonly=False
        self.__verbose=False
        self.__treename=''
        self.__all=False
    def parsecmdln(self):
        """
        Parse commandline
        """
        usage = "usage: \%prog [options] \n"
        self.__parser.add_option("-c","--connect",action="store",dest="connectstring",type="string",help="connection string to the tag DB(required)")
        self.__parser.add_option("-u","--user",action="store",dest="user",type="string",help="user name")
        self.__parser.add_option("-p","--password",action="store",dest="password",type="string",help="password")
        self.__parser.add_option("-P","--path",action="store",dest="authpath",type="string",help="path to authentication.xml")
        self.__parser.add_option("-a","--all",action="store_true",dest="all",help="print overview of all trees(default)")
        self.__parser.add_option("-l","--leaf",action="store_true",dest="leaf",help="print leaf nodes only")
        self.__parser.add_option("-T","--tree",action="store",dest="treename",type="string",help="Print overview of the tree with given name. Note: the tree name is case insensitive, it is internally converted to uppercase")
        self.__parser.add_option("-n","--node",action="store",dest="node",type="string",help="root node of the branch to print. Exclusive with -a option")
        self.__parser.add_option("-v","--verbose",action="store_true",dest="verbose",help="verbose mode")
        self.__parser.set_defaults(connectstring='')
        self.__parser.set_defaults(user='')
        self.__parser.set_defaults(password='')
        self.__parser.set_defaults(authpath='.')
        self.__parser.set_defaults(all=False)
        self.__parser.set_defaults(leaf=False)
        self.__parser.set_defaults(treename='')
        self.__parser.set_defaults(node='')
        self.__parser.set_defaults(verbose=False)
        (options, args) = self.__parser.parse_args()
        if not self.__parser.values.connectstring:
            raise OptionValueError("option -%s is required"%('c'))
        
        if self.__parser.values.treename and self.__parser.values.all:
            raise OptionValueError("option -%s and -%s are exclusive"%('a','T'))
        if self.__parser.values.node and self.__parser.values.all:
            raise OptionValueError("option -%s and -%s are exclusive"%('a','n'))
        self.__treename=self.__parser.values.treename
        self.__all=self.__parser.values.all
        self.__connectstring=update_frontier_connection(self.__parser.values.connectstring)
        self.__user=self.__parser.values.user
        self.__password=self.__parser.values.password
        self.__authpath=self.__parser.values.authpath
        self.__leaf=self.__parser.values.leaf
        self.__node=self.__parser.values.node
        self.__verbose=self.__parser.values.verbose
        if not self.__parser.values.treename and not self.__parser.values.all:
            self.__all=True
        if self.__parser.values.verbose is True:
            print 'connectstring: ',self.__connectstring
            print 'user: ',self.__user
            print 'password: ',self.__password
            print 'authpath: ',self.__authpath
            if self.__all is True:
                print 'print all'
            else:
                print 'print tree: ',self.__treename
                print 'print node: ',self.__node
            if self.__leaf is True:
                print 'print leaf only'
    def printme(self):
        """
        print requested tag inventory entry or all
        """
        #context = coral.Context()
        #if self.__verbose is True:
        #    context.setVerbosityLevel( 'DEBUG' )
        #else:
        #    context.setVerbosityLevel( 'ERROR' )
        svc = coral.ConnectionService()
        config=svc.configuration()
        os.environ['CORAL_AUTH_PATH']=self.__authpath
        config.setDefaultAuthenticationService('CORAL/Services/XMLAuthenticationService')
        session = svc.connect( self.__connectstring,accessMode = coral.access_ReadOnly )
        inv=tagInventory.tagInventory(session)        
        if self.__all is True:
            transaction=session.transaction()
            transaction.start(True)
            schema=session.nominalSchema()
            tablelist=schema.listTables()
            treelist=[]
            for tablename in tablelist:
                if tablename.find("TAGTREE_TABLE_") != -1:
                    treelist.append(tablename[len("TAGTREE_TABLE_"):])
            transaction.commit()
            for treename in treelist:
                print 'tree: ',treename
                mytree=TagTree.tagTree(session,treename)
                if self.__leaf is True:
                    result=mytree.getAllLeaves()
                    print '%s\t%s\t%s\t%s\t%s\t%s\t%s'%('#ID#','#leafNode#','#parent#','#tagname#','#record#','#object#','#pfn#')
                    for r in result:
                        if r.parentid != 0:
                            parentnode=mytree.getNodeById(r.parentid)
                            parentname=parentnode.nodelabel
                            tagcontent=inv.getEntryById(r.tagid)
                            print '%s\t%s\t%s\t%s\t%s\t%s\t%s'%(r.nodeid,r.nodelabel,parentname,tagcontent.tagname,tagcontent.recordname,tagcontent.objectname,tagcontent.pfn)
                        else:
                            print '   root:%s'%(r.nodelabel)
                else:
                    result=mytree.getSubtree('ROOT')
                    for r in result:                    
                        if r.parentid !=0:
                            parentnode=mytree.getNodeById(r.parentid)
                            parentname=parentnode.nodelabel
                            if r.tagid != 0:
                               tagcontent=inv.getEntryById(r.tagid)
                               print '   leafnode:%s   parent:%s   tag:%s record:%s object:%s label:%s pfn:%s'%(r.nodelabel,parentname,tagcontent.tagname,tagcontent.recordname,tagcontent.objectname,tagcontent.labelname,tagcontent.pfn)
                            else:
                               print '   node:%s   parent:%s'%(r.nodelabel,parentname)
                            
                        else:
                            print '   root:%s'%(r.nodelabel)
            del session
            return
        #list node
        mytree=TagTree.tagTree(session,self.__treename)
        try:
            if self.__leaf is True :
               result=mytree.getAllLeaves()
               for r in result:
                   if r.parentid !=0:
                       parentnode=mytree.getNodeById(r.parentid)
                       parentname=parentnode.nodelabel
                       if self.__node is not '':
                           if self.__node == parentname:
                               print 'leafnode:%s   parent:%s'%(r.nodelabel,parentname)
                       else:
                           print 'leafnode:%s   parent:%s'%(r.nodelabel,parentname)
                   else:
                       print 'root:%s'%(r.nodelabel)
            else:
                if self.__node=='':
                    result=mytree.getSubtree('ROOT')
                    for r in result:
                        if r.parentid !=0:
                            parentnode=mytree.getNodeById(r.parentid)
                            parentname=parentnode.nodelabel
                            if r.tagid != 0:
                               tagcontent=inv.getEntryById(r.tagid)
                               print '   leafnode:%s   parent:%s   tag:%s record:%s object:%s label:%s pfn:%s'%(r.nodelabel,parentname,tagcontent.tagname,tagcontent.recordname,tagcontent.objectname,tagcontent.labelname,tagcontent.pfn)
                            else:
                                print 'node:%s   parent:%s'%(r.nodelabel,parentname)
                        else:
                            print 'root:%s'%(r.nodelabel)
                else:
                    result=mytree.getSubtree(self.__node)
                    for r in result:
                        if r.parentid !=0:
                            parentnode=mytree.getNodeById(r.parentid)
                            parentname=parentnode.nodelabel
                            if r.tagid != 0:
                               tagcontent=inv.getEntryById(r.tagid)
                               print '   leafnode:%s   parent:%s   tag:%s record:%s object:%s label:%s pfn:%s'%(r.nodelabel,parentname,tagcontent.tagname,tagcontent.recordname,tagcontent.objectname,tagcontent.labelname,tagcontent.pfn)
                            else:
                                print 'node:%s   parent:%s'%(r.nodelabel,parentname)
                        else:
                            print 'node:%s'%(r.nodelabel)
            del session
        except Exception, e:
            print str(e)
            del session
        
if __name__ == "__main__":
    tagprinter=tagTreePrinter() 
    tagprinter.parsecmdln()
    tagprinter.printme()
    

