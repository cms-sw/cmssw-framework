#!/usr/bin/env python
import coral
from optparse import OptionParser, Option, OptionValueError
from CondCore.TagCollection import DBCopy,tagInventory,TagTree

class tagdbExporter:
   def __init__(self):
      """
        Class add entry in the tag inventory
        usage: %prog [options]
        -s, --source=source: source db connect string (required).
        -d, --dest=dest: destination db connect string (required).
        -P, --path=authpath: path to authentication file
        -a, --all: copy all tag db, existing tag db content is wiped.(default if no -a, -I, -T options are specified)
        -I, --inventory: copy only the inventory, existing inventoru is wiped.
        -T, --tree=tree: copy selected tree. Inventory is updated accordingly. 
        -v, --verbose: switch on verbose mode
        -h, --help: print usage
        """
        self.__parser=OptionParser(option_class=MyOption)
        self.__source=''
        self.__dest=''
        self.__all=False
        self.__inv=False
        self.__tree=''
        self.__authpath=''
        self.__verbose=False
        
   def parsecmdln(self):
        """
        Parse commandline
        """
        usage = "usage: \%prog [options] \n"
        self.__parser.add_option("-s","--source",action="store",dest="source",type="string",help="source db connect string (required)")
        self.__parser.add_option("-d","--dest",action="store",dest="dest",type="string",help="destination db connect string (required).")
        self.__parser.add_option("-P","--path",action="store",dest="authpath",type="string",help="path to authentication file")
        self.__parser.add_option("-a","--all",action="store_true",dest="all",help="copy all tag db, existing tag db content is wiped.(default if no -a, -I, -T options are specified)")
        self.__parser.add_option("-I","--inventory",action="store_true",dest="inventory",help="copy only the inventory, existing inventoru is wiped.")
        self.__parser.add_option("-T","--tree",action="store",dest="tree",type="string",help="copy selected tree. Inventory is updated accordingly.")
        self.__parser.add_option("-v","--verbose",action="store_true",dest="verbose",help="verbose mode")
        self.__parser.set_defaults(verbose=False)

        (options, args) = self.__parser.parse_args()
        if !options.source and !options.dest:
           raise OptionValueError("option -%s and -%s are required"%('s','d'))
        if !options.all and !options.inventory and !options.tree:
           self.__all=True
        elif options.all:
           self.__all=True
        elif options.inventory:
           self.__inventory=True
        elif options.tree:
           self.__tree=self.__parser.values.tree
        raise OptionValueError("options -%s, -%s and -%s are exclusive"%('a','I','T'))  
        if len(self.__parser.values.authpath)!=0:
           self.__authpath=self.__parser.values.authpath        
        self.__verbose=self.__parser.values.verbose
                
        if self.__parser.values.verbose is True:
            print 'source: ',self.__source
            print 'dest: ',self.__dest
            print 'authpath: ',self.__authpath
            print 'all: ',self.__all
            print 'inventory: ',self.__inv
            print 'tree: ',self.__tree
   def exportDB(self):
      """export db according to cmdline options
      """
      sourcesession=svc.connect(self.__source,accessMode=coral.access_Update)
      destsession=svc.connect(self.__dest,accessMode = coral.access_Update)
      try:
        dbcp=DBCopy(sourcesession,destsession,1024)
        if self.__all:
           dbcp.copyDB()
        elif self.__inv:
           dbcp.copyInventory()
        elif len(self.__tree) != 0:
           dbcp.copyTrees([self.__tree])
        del sourcesession
        del destsession
      except Exception, e:
        print str(e)
        del sourcesession
        del destsession
if __name__ == "__main__":
    tagexporter=tagdbExporter() 
    tagexporter.parsecmdln()
    tagexporter.exportDB()
