#!/usr/bin/env python
import os,fnmatch,string
from optparse import OptionParser
class listCondDictionary:
    def __init__(self):
        """
        Search in $CMSSW_RELEASE_BASE/lib/$SCRAM_ARCH/,$CMSSW_BASE/lib/$SCRAM_ARCH/ for dictionary libraries
        usage: %prog [options]
        -v, --verbose: switch on verbose mode
        -h, --help: print usage
        """
        scramarch=os.getenv('SCRAM_ARCH')
        cmsswbase=os.getenv('CMSSW_BASE')
        cmsswreleasebase=os.getenv('CMSSW_RELEASE_BASE')
        if scramarch == None or  cmsswbase == None or cmsswreleasebase == None:
            raise ValueError, "cmssw environment variables not set"
        self.searchpath=[os.path.join(cmsswbase,'lib',scramarch),
                         os.path.join(cmsswreleasebase,'lib',scramarch)]
        self.verbose=False
    def parsecmdln(self):
        """
        Parse commandline
        """
        usage = "usage: \%prog [options] \n"
        parser = OptionParser()
        parser.add_option("-v","--verbose",action="store_true",dest="verbose",
                          help="verbose mode")
        (options, args) = parser.parse_args()
        if self.verbose is True:
            print "search path %s : " % ':'.join(self.searchpath)
    def searchCondDictionary(self):
        """
        Fine all libraries matching the dictionary lib name pattern in the search path
        """
        dictfiles = []
        result = []
        for dir in self.searchpath:
            files=os.listdir(dir)
            #print 'files',files
            sf=fnmatch.filter(files,'pluginCondFormats*Capabilities.so')
            #print 'sf',sf
            if len(sf)!=0:
                dictfiles+=sf
        result=self.unique(dictfiles)
        return result 
    def unique(self,seq):
        """
        Return a list of the elements in s, but without duplicates.
        """
        seen = {}
        result = []
        for item in seq:
            marker = item
            if marker in seen.keys(): continue
            seen[marker] = 1
            result.append(self.dictionaryName(item))
        return result
    def dictionaryName(self,libname):
        """
        Filter out the dictionary name from library name
        """
        nohead=libname[6:]
        result=nohead[:-15]
        return result
if __name__ == "__main__":
    me=listCondDictionary()    
    me.parsecmdln()
    print '\n'.join(me.searchCondDictionary())
 

