[CRAB]

jobtype = cmssw
#
#--- scheduler
# caf: CERN-CAF, condor: LPC-CAF, glite: GRID
scheduler = condor 
### NOTE: just setting the name of the server (pi, lnl etc etc )
###       crab will submit the jobs to the server...
#
#--- server_name
# comment-out: CERN-CAF, LPC-CAF, cern: GRID
#server_name = cern

[CMSSW]

#lumi_mask=json.txt
total_number_of_lumis = -1
#lumis_per_job = 1

### The data you want to access (to be found on DBS)
###########################
datasetpath = /MinimumBias/Commissioning10-Jun9thReReco_of_valskim_PreProduction_370p2_v1/RECO
###########################

### selection can be a comma-separated list of run numbers and run number ranges: 1,2,3-4
#######################
runselection = 132601
#######################

### The ParameterSet you want to use
###########################
pset = source_cfg.py 
###########################

### Splitting parameters
###########################
total_number_of_events = -1 
number_of_jobs = 10
###########################

### The output files (comma separated list)
###########################
output_file = HcalValHarvestingEDM.root
###########################

[USER]

### OUTPUT files Management
##  output back into UI
return_data = 1

### OUTPUT files INTO A SE
copy_data = 0

###email notifications
thresholdLevel = 100
#eMail = apresyan@cern.ch

[GRID]

## RB/WMS management:
#rb = CERN
#proxy_server = myproxy.cern.ch

##  Black and White Lists management:
## By Storage
##se_black_list = T0,T1

#se_white_list = grid-srm.physik.rwth-aachen.de

## By ComputingElement
#ce_black_list = gridce2.pi.infn.it
#ce_black_list = srm.ciemat.es,srm-3.t2.ucsd.edu,hephyse.oeaw.ac.at,maite.iihe.ac.be,t2-srm-02.lnl.infn.it,sbgse1.in2p3.fr,cmssrm.hep.wisc.edu,cmsdcache.pi.infn.it,srm.minnesota.edu,storm.ifca.es
#ce_white_list = 

[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))
