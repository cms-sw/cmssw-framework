
/*!

\page RecoMuon_TrackerSeedGenerator Package RecoMuon/TrackerSeedGenerator

<center>
<small>

<!-- @CVS_TAG@ will be substituted at build time, no need to touch -->
<a href=http://cmssw.cvs.cern.ch/cgi-bin/cmssw.cgi/CMSSW/RecoMuon/TrackerSeedGenerator/?cvsroot=CMSSW&only_with_tag=@CVS_TAG@>Source code (CVS tag: @CVS_TAG@)</a> - 
<a href=http://cmssw.cvs.cern.ch/cgi-bin/cmssw.cgi/CMSSW/RecoMuon/TrackerSeedGenerator/.admin/developers?rev=HEAD&cvsroot=CMSSW&content-type=text/vnd.viewcvs-markup>Administrative privileges</a>
</small>
</center>

\section desc Description
<!-- Short description of what this package is supposed to provide -->
This package provides a class to produce a collection of TrajectorySeed
inspired by a StandAloneMuon.  

\subsection interface Public interface
<!-- List the classes that are provided for use in other packages (if any) -->

- MuonSeedFromConsecutiveHits
- TrackerSeedGeneratorFactory
- TrackerSeedGenerator

\subsection modules Modules
<!-- Describe modules implemented in this package and their parameter set -->

- TrackerSeedGeneratorFactory : The seal::PluginFactory for producing
TrajectorySeed using different algorithms.  To use the TrackerSeedGeneratorFactory, add the following to your code: (see RecoMuon/TrackingTools for more information about MuonServiceProxy )
Add the following to your code:
\htmlonly
<pre>
  // service parameters
  ParameterSet serviceParameters = parameterSet.getParameter<ParameterSet>("ServiceParameters");
  
  // the services
  theService = new MuonServiceProxy(serviceParameters);

  //
  // start seed generator;
  //
  ParameterSet seedGenPSet = par.getParameter<ParameterSet>("SeedGeneratorParameters");
  std::string seedGenName = seedGenPSet.getParameter<std::string>("ComponentName");
  theTkSeedGenerator = TrackerSeedGeneratorFactory::get()->create(seedGenName, seedGenPSet);
  theTkSeedGenerator->init(theService);
</pre>
\endhtmlonly

Once per event, you must update the services:
\htmlonly
<pre>
 theTkSeedGenerator->setEvent(event);
</pre>
\endhtmlonly

\subsection algorithms Available Algorithms
Choose one of the available algorithms to generate the StandAloneMuon inspired trajectory seeds.

- TSGFromPixelPairs
In your <b>.cfg</b> file, include
\htmlonly
<pre>
include "RecoMuon/TrackerSeedGenerator/data/TSGFromPixelPairs.cfi"
</pre>
\endhtmlonly
Which is
<pre>
\htmlinclude TSGFromPixelPairs.cfi
</pre>

- TSGFromPixelTriplets
In your <b>.cfg</b> file, include
\htmlonly
<pre>
include "RecoMuon/TrackerSeedGenerator/data/TSGFromPixelTriplets.cfi"
</pre>
\endhtmlonly
Which is
<pre>
\htmlinclude TSGFromPixelTriplets.cfi
</pre>


- TSGForRoadSearch
In your <b>.cfg</b> file, include
\htmlonly
<pre>
include "RecoMuon/TrackerSeedGenerator/data/TSGForRoadSearch.cfi"
</pre>
\endhtmlonly
Which is
<pre>
\htmlinclude TSGForRoadSearch.cfi
</pre>


\subsection tests Unit tests and examples
<!-- Describe cppunit tests and example configuration files -->
Unknown

\section status Status and planned development 
<!-- e.g. completed, stable, missing features --> 
Recent development in RecoTracker/TkSeedGenerator has spurred
reorganization and development of RecoMuon/TrackerSeedGenerator so that
RecoMuon/TrackerSeedGenerator uses standard RecoTracker classes.  <br>
Current development includes a SmartSeeder which will start with seeds
from hit triplets and then attemp a seed from hit pairs if the hit
triplet seed fails.  Also, the smart seeder will attemt to use different
seed types based on the position in the detector (for example, it will
use a pixel-strip seed in the very forward region).


<hr>
Last updated:
@DATE@  Author: computer-generated.
*/

