#! /usr/bin/env python

from CalibMuon.DTCalibration.Workflow.DTTTrigProd import DTTTrigProd
from CalibMuon.DTCalibration.Workflow.DTTTrigTimeBoxesWriter import DTTTrigTimeBoxesWriter
from CalibMuon.DTCalibration.Workflow.DTResidualCalibration import DTResidualCalibration
from CalibMuon.DTCalibration.Workflow.DTTTrigResidualCorr import DTTTrigResidualCorr 
from CalibMuon.DTCalibration.Workflow.DTTTrigValid import DTTTrigValid
from CalibMuon.DTCalibration.Workflow.DTValidSummary import DTValidSummary
from CalibMuon.DTCalibration.Workflow.DTVDriftSegmentCalibration import DTVDriftSegmentCalibration
from CalibMuon.DTCalibration.Workflow.DTVDriftSegmentWriter import DTVDriftSegmentWriter
from CalibMuon.DTCalibration.Workflow.DTVDriftMeanTimerCalibration import DTVDriftMeanTimerCalibration
from CalibMuon.DTCalibration.Workflow.DTVDriftMeanTimerWriter import DTVDriftMeanTimerWriter
from CalibMuon.DTCalibration.Workflow.DTNoiseCalibration import DTNoiseCalibration
from CalibMuon.DTCalibration.Workflow.DTDQMValidation import DTDQMValidation
from CalibMuon.DTCalibration.Workflow.DTDQMMerge import DTDQMMerge
from CalibMuon.DTCalibration.Workflow.DTDQMHarvesting import DTDQMHarvesting
from CalibMuon.DTCalibration.Workflow.DTDqm import DTDqm
from CalibMuon.DTCalibration.Workflow.CrabWatch import CrabWatch
from CalibMuon.DTCalibration.Workflow.tools import listFilesInCastor,haddInCastor,listFilesLocal,haddLocal,copyFilesFromCastor,copyFilesLocal,parseInput,getDatasetStr
import sys,os,time,optparse

def dqmOutputDir(type,dirLabel,config):
    dqm_output_dir = ''
    if config.stageOutLocal:
        from crab_util import findLastWorkDir
        cwd = os.getcwd()
        crab_task_dir = config.base_dir + '/' + dirLabel
        os.chdir(crab_task_dir)
        crabdir = findLastWorkDir('crab_0_')
        if not crabdir: raise RuntimeError,'Could not find CRAB dir in %s' % crab_task_dir
        os.chdir(cwd)
        dqm_output_dir = crabdir + "/res"
    elif config.stageOutCAF:
        datasetstr = getDatasetStr(config.datasetpath)
        dqm_output_dir = config.castorpath + '/DTCalibration/' + datasetstr + '/Run' + str(run) + '/' + type + '/' + dirLabel + '/' + 'v' + str(trial)

    return dqm_output_dir

def runTtrigProd(run,runselection,trial,config,runStep=True):

    print "Processing tTrig production"
    #config.runselection = runselection
    datasetstr = getDatasetStr(config.datasetpath)
    config.userdircaf = 'DTCalibration/' + datasetstr + '/Run' + str(run) + '/TTrigCalibration/' + 'TimeBoxes' + '/' + 'v' + str(trial)
   
    task_dir = config.base_dir + '/TimeBoxes'
    dtTtrigProd = DTTTrigProd(run,task_dir,config) 
    dtTtrigProd.writeCfg()
    
    if runStep:
        project_prod = dtTtrigProd.run()

        print "Sent calibration jobs with project",project_prod
        print "%.0f%% of jobs are required to finish" % config.jobsFinishedThreshold
      
        crabProd = CrabWatch(project_prod)
        crabProd.setThreshold(config.jobsFinishedThreshold)
        crabProd.start()
        crabProd.join()

        result_file = config.result_dir + '/DTTimeBoxes_%s.root'%run
        if config.stageOutLocal:
            output_dir = project_prod + "/res"
            haddLocal(output_dir,result_file) 
        elif config.stageOutCAF:
            castor_dir = config.castorpath + "/" + config.userdircaf
            haddInCastor(castor_dir,result_file,'DTTimeBoxes','rfio://castorcms/','?svcClass=cmscafuser')

        return project_prod

    return None

def runTtrigWriter(run,config,runStep=True):

    print "Processing tTrig correction"
    dtTtrigWriter = DTTTrigTimeBoxesWriter(run,config.run_dir,config.result_dir,config)
    dtTtrigWriter.writeCfg()
 
    if runStep:  
        dtTtrigWriter.run()

        print "Finished processing:"
        for pset in dtTtrigWriter.configs: print "--->",pset

def runResidualCalib(run,runselection,trial,input_db,label,result_file,config,runStep=True):

    print "Processing tTrig calibration"
    #config.runselection = runselection
    datasetstr = getDatasetStr(config.datasetpath)
    config.userdircaf = 'DTCalibration/' + datasetstr + '/Run' + str(run) + '/TTrigCalibration/' + label + '/' + 'v' + str(trial)
    
    task_dir = config.base_dir + '/' + label
    dtResidualCalib = DTResidualCalibration(run=run,
                                            dir=task_dir,
                                            input_db=input_db,
                                            config=config) 
    dtResidualCalib.writeCfg()

    if runStep:
        project_residualCalib = dtResidualCalib.run()

        print "Sent calibration jobs with project",project_residualCalib
        print "%.0f%% of jobs are required to finish" % config.jobsFinishedThreshold

        crabResidualCalib = CrabWatch(project_residualCalib)
        crabResidualCalib.setThreshold(config.jobsFinishedThreshold)
        crabResidualCalib.start()
        crabResidualCalib.join()

        if config.stageOutLocal:
            output_dir = project_residualCalib + "/res"
            haddLocal(output_dir,result_file,'residuals')
        elif config.stageOutCAF:
            castor_dir = config.castorpath + "/" + config.userdircaf
            haddInCastor(castor_dir,result_file,'residuals','rfio://castorcms/','?svcClass=cmscafuser')

        return project_residualCalib

    return None

def runTtrigResidualCorr(run,input_db,root_file,config,runStep=True):

    print "Processing tTrig residual correction"
    dtTtrigResidualCorr = DTTTrigResidualCorr(run=run,
                                              dir=config.run_dir,
                                              input_db=input_db,
                                              residuals=root_file,
                                              result_dir=config.result_dir,
                                              config=config)
    dtTtrigResidualCorr.writeCfg()

    if runStep:  
        dtTtrigResidualCorr.run()

        print "Finished processing:"
        for pset in dtTtrigResidualCorr.configs: print "--->",pset

#def runTtrigValid(run,runselection,trial,input_db,label,result_file,config,runStep=True):
def runTtrigValid(run,runselection,trial,input_db,label,config,runStep=True):

    print "Processing tTrig validation"
    #config.runselection = runselection
    datasetstr = getDatasetStr(config.datasetpath)
    config.userdircaf = 'DTCalibration/' + datasetstr + '/Run' + str(run) + '/TTrigValidation/' + label + '/' + 'v' + str(trial)

    task_dir = config.base_dir + '/' + label
    dtTtrigValid = DTTTrigValid(run=run,
                                dir=task_dir,
                                input_db=input_db,
                                config=config)
    dtTtrigValid.writeCfg()

    if runStep:
        project_valid = dtTtrigValid.run()

        print "Sent validation jobs with project",project_valid
        print "%.0f%% of jobs are required to finish" % config.jobsFinishedThreshold

        crabValid = CrabWatch(project_valid)
        crabValid.setThreshold(config.jobsFinishedThreshold)
        crabValid.start()
        crabValid.join()

        """  
        if config.stageOutLocal:
            output_dir = project_valid + "/res"
            haddLocal(output_dir,result_file,'residuals')
        elif config.stageOutCAF:
            castor_dir = config.castorpath + "/" + config.userdircaf
            haddInCastor(castor_dir,result_file,'residuals','rfio://castorcms/','?svcClass=cmscafuser')
        """

        return project_valid

    return None

def runTtrigValidSummary(run,input_file,output_file,config,runStep=True):

    print "Processing Validation Summary"
    dtTtrigValidSummary = DTValidSummary(run,config.run_dir,input_file,output_file,config)
    dtTtrigValidSummary.writeCfg()

    if runStep:
        dtTtrigValidSummary.run()
 
        print "...Validation Summary finished"

def runVDriftSegmentCalib(run,runselection,trial,label,result_file,config,runStep=True):

    print "Processing vDrift calibration"
    #config.runselection = runselection
    datasetstr = getDatasetStr(config.datasetpath)
    config.userdircaf = 'DTCalibration/' + datasetstr + '/Run' + str(run) + '/VDriftCalibration/' + label + '/' + 'v' + str(trial)

    task_dir = config.base_dir + '/' + label
    dtVDriftSegment = DTVDriftSegmentCalibration(run=run,
                                                 dir=task_dir,
                                                 config=config)
    dtVDriftSegment.writeCfg()

    if runStep:
        project_segment = dtVDriftSegment.run()

        print "Sent validation jobs with project",project_segment
        print "%.0f%% of jobs are required to finish" % config.jobsFinishedThreshold

        crabVDriftSegment = CrabWatch(project_segment)
        crabVDriftSegment.setThreshold(config.jobsFinishedThreshold)
        crabVDriftSegment.start()
        crabVDriftSegment.join()

        if config.stageOutLocal:
            output_dir = project_segment + "/res"
            haddLocal(output_dir,result_file,'DTVDriftHistos')
        elif config.stageOutCAF:
            castor_dir = config.castorpath + "/" + config.userdircaf
            haddInCastor(castor_dir,result_file,'DTVDriftHistos','rfio://castorcms/','?svcClass=cmscafuser')

        return project_segment

    return None

def runVDriftSegmentWriter(run,root_file,config,runStep=True):

    print "Processing vDrift writer"
    dtVDriftSegmentWriter = DTVDriftSegmentWriter(run=run,
                                                  dir=config.run_dir,
                                                  input_file=root_file,
                                                  output_dir=config.result_dir,
                                                  config=config)
    dtVDriftSegmentWriter.writeCfg()

    if runStep:
        dtVDriftSegmentWriter.run()

        print "Finished processing:"
        for pset in dtVDriftSegmentWriter.configs: print "--->",pset

def runVDriftMeanTimerCalib(run,runselection,trial,label,result_file,config,runStep=True):

    print "Processing vDrift calibration"
    #config.runselection = runselection
    datasetstr = getDatasetStr(config.datasetpath)
    config.userdircaf = 'DTCalibration/' + datasetstr + '/Run' + str(run) + '/VDriftCalibration/' + label + '/' + 'v' + str(trial)

    task_dir = config.base_dir + '/' + label
    dtVDriftMeanTimer = DTVDriftMeanTimerCalibration(run=run,
                                                     dir=task_dir,
                                                     config=config)
    dtVDriftMeanTimer.writeCfg()

    if runStep:
        project_meantimer = dtVDriftMeanTimer.run()

        print "Sent validation jobs with project",project_meantimer
        print "%.0f%% of jobs are required to finish" % config.jobsFinishedThreshold

        crabVDriftMeanTimer = CrabWatch(project_meantimer)
        crabVDriftMeanTimer.setThreshold(config.jobsFinishedThreshold)
        crabVDriftMeanTimer.start()
        crabVDriftMeanTimer.join()

        if config.stageOutLocal:
            output_dir = project_meantimer + "/res"
            haddLocal(output_dir,result_file,'DTTMaxHistos')
        elif config.stageOutCAF:
            castor_dir = config.castorpath + "/" + config.userdircaf
            haddInCastor(castor_dir,result_file,'DTTMaxHistos','rfio://castorcms/','?svcClass=cmscafuser')

        return project_meantimer

    return None

def runVDriftMeanTimerWriter(run,root_file,config,runStep=True):

    print "Processing vDrift writer"
    dtVDriftMeanTimerWriter = DTVDriftMeanTimerWriter(run=run,
                                                  dir=config.run_dir,
                                                  input_file=root_file,
                                                  output_dir=config.result_dir,
                                                  config=config)
    dtVDriftMeanTimerWriter.writeCfg()

    if runStep:
        dtVDriftMeanTimerWriter.run()

        print "Finished processing:"
        for pset in dtVDriftMeanTimerWriter.configs: print "--->",pset

def runDQMClient(run,output_dir,config,runStep=True):

    print "Processing DQM Merge"

    if runStep:
        dqm_files = [] 
        if config.stageOutLocal:
            dqm_files = listFilesLocal(output_dir,'DQM')
            dqm_files = ['file:%s' % item for item in dqm_files]
            dtDqmFinal = DTDqm(run,config.run_dir,dqm_files,config.result_dir,config)
            dtDqmFinal.writeCfg()
            dtDqmFinal.run()
        elif config.stageOutCAF:
            dqm_files = listFilesInCastor(output_dir,'DQM','')
            dqm_files = [file.replace('/castor/cern.ch/cms','') for file in dqm_files] 
            dtDqmFinal = DTDqm(run,config.run_dir,dqm_files,config.result_dir,config)
            dtDqmFinal.writeCfg()
            dtDqmFinal.run()

        print "...DQM Merge finished"
    else:
        dqm_files = [] 
        dtDqmFinal = DTDqm(run,config.run_dir,dqm_files,config.result_dir,config)
        dtDqmFinal.writeCfg()

def runDQMHarvesting(run,output_dir,config,runStep=True):

    print "Processing DQM harvesting"

    if runStep:
        dqm_files = [] 
        if config.stageOutLocal:
            dqm_files = listFilesLocal(output_dir,'DQM')
            dqm_files = ['file:%s' % item for item in dqm_files]
            dtDqmFinal = DTDQMHarvesting(run,config.run_dir,dqm_files,config.result_dir,config)
            dtDqmFinal.writeCfg()
            dtDqmFinal.run()
        elif config.stageOutCAF:
            dqm_files = listFilesInCastor(output_dir,'DQM','')
            dqm_files = [file.replace('/castor/cern.ch/cms','') for file in dqm_files] 
            dtDqmFinal = DTDQMHarvesting(run,config.run_dir,dqm_files,config.result_dir,config)
            dtDqmFinal.writeCfg()
            dtDqmFinal.run()

        print "...DQM harvesting finished"
    else:
        dqm_files = [] 
        dtDqmFinal = DTDQMHarvesting(run,config.run_dir,dqm_files,config.result_dir,config)
        dtDqmFinal.writeCfg()

def runDQMMerge(run,output_dir,config,runStep=True):

    print "Processing DQM merge"

    if runStep:
        dqm_files = [] 
        if config.stageOutLocal:
            dqm_files = listFilesLocal(output_dir,'DQM')
            dqm_files = ['file:%s' % item for item in dqm_files]
            dtDQMMerge = DTDQMMerge(run,config.run_dir,dqm_files,config.result_dir,config)
            dtDQMMerge.writeCfg()
            dtDQMMerge.run()
        elif config.stageOutCAF:
            dqm_files = listFilesInCastor(output_dir,'DQM','')
            dqm_files = [file.replace('/castor/cern.ch/cms','') for file in dqm_files] 
            dtDQMMerge = DTDQMMerge(run,config.run_dir,dqm_files,config.result_dir,config)
            dtDQMMerge.writeCfg()
            dtDQMMerge.run()

        print "...DQM merge finished"
    else:
        dqm_files = [] 
        dtDQMMerge = DTDQMMerge(run,config.run_dir,dqm_files,config.result_dir,config)
        dtDQMMerge.writeCfg()

############################################################ 
# tTrig workflow
############################################################ 
def runTtrigWorkflow(mode,run,config,execute=True):
    trial = config.trial
    runselection = config.runselection
    ttrig_input_db = None
    if hasattr(config,'inputTTrigDB') and config.inputTTrigDB: ttrig_input_db = os.path.abspath(config.inputTTrigDB)
    result_dir = config.result_dir
    if mode == 'timeboxes':
        timeBoxes = os.path.abspath(result_dir + '/' + 'DTTimeBoxes_' + run + '.root')
        ttrig_timeboxes_db = os.path.abspath(result_dir + '/' + 'ttrig_timeboxes_' + run + '.db')
        residualsFirst = os.path.abspath(result_dir + '/' + 'DTResidualValidation_' + run + '.root')
        ttrig_residuals_db = os.path.abspath(result_dir + '/' + 'ttrig_residuals_' + run + '.db')
        residualsResidCorr = os.path.abspath(result_dir + '/' + 'DTResidualValidation_ResidCorr_' + run + '.root')
        summaryResiduals = os.path.abspath(result_dir + '/' + 'SummaryResiduals_' + run + '.root') 

        if not execute:
            print "Writing configuration files.."
            runTtrigProd(run,runselection,trial,config,False)
            runTtrigWriter(run,config,False)
            runResidualCalib(run,runselection,trial,ttrig_timeboxes_db,'Residuals',residualsFirst,config,False)
            runTtrigResidualCorr(run,ttrig_timeboxes_db,residualsFirst,config,False)                
            runTtrigValid(run,runselection,trial,ttrig_residuals_db,'ResidualsResidCorr',config,False)
            #runTtrigValidSummary(run,residualsResidCorr,summaryResiduals,config,False)
            runDQMClient(run,'',config,False)

            sys.exit(0)

        # Produce time-boxes
        if not os.path.exists(timeBoxes): runTtrigProd(run,runselection,trial,config)
        if not os.path.exists(timeBoxes): raise RuntimeError,'Could not produce %s' % timeBoxes

        # Write tTrig DB
        if not os.path.exists(ttrig_timeboxes_db): runTtrigWriter(run,config)
        if not os.path.exists(ttrig_timeboxes_db): raise RuntimeError,'Could not produce %s' % ttrig_timeboxes_db

        # Produce residuals
        if not os.path.exists(residualsFirst):
            runResidualCalib(run,runselection,trial,ttrig_timeboxes_db,'Residuals',residualsFirst,config)
        if not os.path.exists(residualsFirst): raise RuntimeError,'Could not produce %s' % residualsFirst

        # Correction from residuals and write tTrig DB
        if not os.path.exists(ttrig_residuals_db): runTtrigResidualCorr(run,ttrig_timeboxes_db,residualsFirst,config)
        if not os.path.exists(ttrig_residuals_db): raise RuntimeError,'Could not produce %s' % ttrig_residuals_db

        # Validation
        runTtrigValid(run,runselection,trial,ttrig_residuals_db,'ResidualsResidCorr',config)

        """
        # Summary of validation
        if not os.path.exists(summaryResiduals): runTtrigValidSummary(run,residualsResidCorr,summaryResiduals,config)
        if not os.path.exists(summaryResiduals): raise RuntimeError,'Could not produce %s' % summaryResiduals
        """
        # Produce DQM output 
        dqm_output_dir = dqmOutputDir('TTrigValidation','ResidualsResidCorr',config)
        runDQMClient(run,dqm_output_dir,config)

    elif input.workflowMode == 'residuals':
        residualsFirst = os.path.abspath(result_dir + '/' + 'DTResidualValidation_' + run + '.root')
        ttrig_residuals_db = os.path.abspath(result_dir + '/' + 'ttrig_residuals_' + run + '.db')
        residualsResidCorr = os.path.abspath(result_dir + '/' + 'DTResidualValidation_ResidCorr_' + run + '.root')
        summaryResiduals = os.path.abspath(result_dir + '/' + 'SummaryResiduals_' + run + '.root')

        if not execute:
            print "Writing configuration files.."
            if ttrig_input_db:
                runResidualCalib(run,runselection,trial,ttrig_input_db,'Residuals',residualsFirst,config,False)
                runTtrigResidualCorr(run,ttrig_input_db,residualsFirst,config,False)
            else:
                runResidualCalib(run,runselection,trial,None,'Residuals',residualsFirst,config,False)
                runTtrigResidualCorr(run,None,residualsFirst,config,False)

            runTtrigValid(run,runselection,trial,ttrig_residuals_db,'ResidualsResidCorr',config,False)
            #runTtrigValidSummary(run,residualsResidCorr,summaryResiduals,config,False)
            runDQMClient(run,'',config,False)

            sys.exit(0)

        # Produce residuals
        if not os.path.exists(residualsFirst):
            if ttrig_input_db:
                runResidualCalib(run,runselection,trial,ttrig_input_db,'Residuals',residualsFirst,config) 
            else:
                runResidualCalib(run,runselection,trial,None,'Residuals',residualsFirst,config)
        if not os.path.exists(residualsFirst): raise RuntimeError,'Could not produce %s' % residualsFirst

        # Correction from residuals and write tTrig DB
        if not os.path.exists(ttrig_residuals_db):
            if ttrig_input_db: runTtrigResidualCorr(run,ttrig_input_db,residualsFirst,config)
            else: runTtrigResidualCorr(run,None,residualsFirst,config)
        if not os.path.exists(ttrig_residuals_db): raise RuntimeError,'Could not produce %s' % ttrig_residuals_db

        # Validation
        runTtrigValid(run,runselection,trial,ttrig_residuals_db,'ResidualsResidCorr',config)

        """  
        # Summary of validation
        if not os.path.exists(summaryResiduals):
            runTtrigValidSummary(run,residualsResidCorr,summaryResiduals,config)
        if not os.path.exists(summaryResiduals): raise RuntimeError,'Could not produce %s' % summaryResiduals
        """
        # Produce DQM output 
        dqm_output_dir = dqmOutputDir('TTrigValidation','ResidualsResidCorr',config)
        runDQMClient(run,dqm_output_dir,config)

    elif input.workflowMode == 'validation':
        residualsValid = os.path.abspath(result_dir + '/' + 'DTResidualValidation_' + run + '.root')
        summaryResiduals = os.path.abspath(result_dir + '/' + 'SummaryResiduals_' + run + '.root')

        if not execute:
            print "Writing configuration files.."
            if ttrig_input_db:
                runTtrigValid(run,runselection,trial,ttrig_input_db,'Residuals',config,False)
            else:
                runTtrigValid(run,runselection,trial,None,'Residuals',config,False)

            #runTtrigValidSummary(run,residualsValid,summaryResiduals,config,False)
            runDQMClient(run,'',config,False)

            sys.exit(0)

        # Validation
        if ttrig_input_db:
            runTtrigValid(run,runselection,trial,ttrig_input_db,'Residuals',config)
        else:
            runTtrigValid(run,runselection,trial,None,'Residuals',config)

        """
        # Summary of validation
        if not os.path.exists(summaryResiduals):
            runTtrigValidSummary(run,residualsValid,summaryResiduals,config)
        if not os.path.exists(summaryResiduals): raise RuntimeError,'Could not produce %s' % summaryResiduals
        """

        # Produce DQM output 
        dqm_output_dir = dqmOutputDir('TTrigValidation','Residuals',config)
        runDQMClient(run,dqm_output_dir,config)

    return 0

############################################################ 
# vDrift workflow
############################################################
def runVDriftWorkflow(mode,run,config,execute=True):
    trial = config.trial
    runselection = config.runselection
    result_dir = config.result_dir
    if mode == 'segment':
        vDriftHistos = os.path.abspath(result_dir + '/' + 'DTVDriftHistos_' + run + '.root')
        vDrift_segment_db = os.path.abspath(result_dir + '/' + 'vDrift_segment_' + run + '.db')

        if not execute:
            print "Writing configuration files.."
            runVDriftSegmentCalib(run,runselection,trial,'VDriftHistos',vDriftHistos,config,False)
            runVDriftSegmentWriter(run,vDriftHistos,config,False)
     
            sys.exit(0)

        # Produce vDrift histos
        if not os.path.exists(vDriftHistos):
            runVDriftSegmentCalib(run,runselection,trial,'VDriftHistos',vDriftHistos,config)
        if not os.path.exists(vDriftHistos): raise RuntimeError,'Could not produce %s' % vDriftHistos

        # Write vDrift DB
        if not os.path.exists(vDrift_segment_db): runVDriftSegmentWriter(run,vDriftHistos,config)
        if not os.path.exists(vDrift_segment_db): raise RuntimeError,'Could not produce %s' % vDrift_segment_db

    elif mode == 'meantimer':
        vDriftTMaxHistos = os.path.abspath(result_dir + '/' + 'DTTMaxHistos_' + run + '.root')
        vDrift_meantimer_db = os.path.abspath(result_dir + '/' + 'vDrift_meantimer_' + run + '.db')

        if not execute:
            print "Writing configuration files.."
            runVDriftMeanTimerCalib(run,runselection,trial,'VDriftTMaxHistos',vDriftTMaxHistos,config,False)
            runVDriftMeanTimerWriter(run,vDriftTMaxHistos,config,False)

            sys.exit(0)

        # Produce t_max histos
        if not os.path.exists(vDriftTMaxHistos):
            runVDriftMeanTimerCalib(run,runselection,trial,'VDriftTMaxHistos',vDriftTMaxHistos,config)
        if not os.path.exists(vDriftTMaxHistos): raise RuntimeError,'Could not produce %s' % vDriftTMaxHistos

        # Write vDrift DB
        if not os.path.exists(vDrift_meantimer_db): runVDriftMeanTimerWriter(run,vDriftTMaxHistos,config)
        if not os.path.exists(vDrift_meantimer_db): raise RuntimeError,'Could not produce %s' % vDrift_meantimer_db

    return 0        

############################################################ 
# noise workflow
############################################################
def runNoiseWorkflow(mode,run,config,execute=True):
    print "Processing noise calibration"

    trial = config.trial
    runselection = config.runselection
    result_dir = config.result_dir
    result_file = os.path.abspath(result_dir + '/' + 'dtNoiseCalib_' + run + '.root')
    noise_db = os.path.abspath(result_dir + '/' + 'noise_' + run + '.db')
    noise_txt = os.path.abspath(result_dir + '/' + 'noise_' + run + '.txt')
   
    datasetstr = getDatasetStr(config.datasetpath)
    config.userdircaf = 'DTCalibration/' + datasetstr + '/Run' + str(run) + '/NoiseCalibration/' + label + '/' + 'v' + str(trial)

    task_dir = config.base_dir + '/NoiseCalib'
    dtNoiseCalibration = DTNoiseCalibration(run=run,
                                            dir=task_dir,
                                            config=config)
    if not execute:
        dtNoiseCalibration.writeCfg()
        sys.exit(0)
    else:
        dtNoiseCalibration.writeCfg()
        project_noise = dtNoiseCalibration.run()

        print "Sent calibration jobs with project",project_noise
        print "%.0f%% of jobs are required to finish" % config.jobsFinishedThreshold

        crabNoiseCalibration = CrabWatch(project_noise)
        crabNoiseCalibration.setThreshold(config.jobsFinishedThreshold)
        crabNoiseCalibration.start()
        crabNoiseCalibration.join()     

        if config.stageOutLocal:
            crab_output_dir = project_noise + "/res"
            retcode = copyFilesLocal(crab_output_dir,result_dir,'dtNoiseCalib')
            retcode = copyFilesLocal(crab_output_dir,result_dir,'noise')
        elif config.stageOutCAF:
            castor_dir = config.castorpath + "/" + config.userdircaf
            retcode = copyFilesFromCastor(castor_dir,result_dir,'dtNoiseCalib')
            retcode = copyFilesFromCastor(castor_dir,result_dir,'noise')

    return 0

############################################################ 
# t0 workflow
############################################################
def runT0Workflow(mode,run,config,execute=True):

    return 0

############################################################ 
# Validation workflow
############################################################
def runValidationWorkflow(mode,run,config,execute=True):
    print "Processing DQM validation"
    trial = config.trial
    runselection = config.runselection
    result_dir = config.result_dir
    datasetstr = getDatasetStr(config.datasetpath)
    dirLabel = 'DQM'
    config.userdircaf = 'DTCalibration/' + datasetstr + '/Run' + str(run) + '/DQMValidation/' + dirLabel + '/' + 'v' + str(trial)

    task_dir = config.base_dir + '/' + dirLabel
    dtDQMValid = DTDQMValidation(run=run,
                                 dir=task_dir,
                                 config=config)
    if not execute:
	dtDQMValid.writeCfg()
        runDQMMerge(run,'',config,False)
        runDQMHarvesting(run,'',config,False)

        sys.exit(0)
    else:
        dtDQMValid.writeCfg()
        project_valid = dtDQMValid.run()

        print "Sent validation jobs with project",project_valid
        print "%.0f%% of jobs are required to finish" % config.jobsFinishedThreshold

        crabValid = CrabWatch(project_valid)
        crabValid.setThreshold(config.jobsFinishedThreshold)
        crabValid.start()
        crabValid.join()

	# Produce DQM output 
	dqm_output_dir = dqmOutputDir('DQMValidation',dirLabel,config)
	runDQMMerge(run,dqm_output_dir,config)
        # Run harvesting from merged DQM file 
        dqm_merge_dir = os.path.abspath(result_dir)
        runDQMHarvesting(run,dqm_merge_dir,config)

    return 0


if __name__ == '__main__':

    parser = optparse.OptionParser(usage="usage: %prog arg1 arg2 [options]")
    parser.add_option("-r","--run", dest="run", help="set reference run number (typically first or last run in list)")
    parser.add_option("--runselection", dest="runselection", help="run list or range")
    parser.add_option("--label", dest="label", default="dtCalibration", help="label used in the naming of workflow output")
    parser.add_option("--trial", dest="trial", type="int", help="trial number used in the naming of output directories")
    parser.add_option("--datasetpath", dest="datasetpath", help="dataset name to process")
    parser.add_option("--globaltag", dest="globaltag", help="global tag identifier (without the '::All' string)")
    parser.add_option("--preselection", dest="preselection", help="configuration fragment and sequence name, separated by a ':', defining a pre-selection filter")
    parser.add_option("--inputVDriftDB", dest="inputVDriftDB", help="uses local SQLITE vDrift DB (instead of using the one in the GT)")
    parser.add_option("--inputTTrigDB", dest="inputTTrigDB", help="uses local SQLITE tTrig DB (instead of using the one in the GT)")
    parser.add_option("--runOnCosmics", action="store_true", dest="runOnCosmics", default=False, help="set this option to run on Cosmics")
    parser.add_option("--runOnRAW", action="store_true", dest="runOnRAW", default=False, help="set this option to run on RAW")
    #parser.add_option("--templatepath", dest="templatepath", help="path to dir with template cfg files")
    parser.add_option("--no_exec", action="store_true", dest="no_exec", default=False, help="script will not execute")

    # Option group - options for residuals mode
    #group_residuals = optparse.OptionGroup(parser,"Options for 'residuals' mode")
    #group_residuals.add_option("--inputDB", dest="inputDB", help="sets initial DB (instead of using the one in the GT)")
    #parser.add_option_group(group_residuals)

    # Option group - additional options
    group_additional = optparse.OptionGroup(parser,"Additional options")
    group_additional.add_option("--email", dest="email", help="user email")
    group_additional.add_option("--castorpath", dest="castorpath", default=('/castor/cern.ch/cms/store/caf/user/%s' % os.environ['USER']), help="path to user area at CAF (default /castor/cern.ch/cms/store/caf/user/username)")
    group_additional.add_option("--useCRABServer", action="store_true", dest="useserver", default=False, help="will use CRAB server to submit jobs (default = False)")
    group_additional.add_option("--queueAtCAF", dest="queueAtCAF", default='cmscaf1nh', help="")
    group_additional.add_option("--jobsFinishedThreshold", dest="jobsFinishedThreshold", type="float", default=100, help="percentage above or equal to which CRAB tasks will be considered completed")

    group_additional.add_option("--runOnGrid", action="store_true", dest="runOnGrid", default=False, help="workflow will be run on the Grid (instead of the CAF)")
    group_additional.add_option("--stageOutLocal", action="store_true", dest="stageOutLocal", default=False, help="output will be copied locally (if running on the Grid this will be the default)")

    # Split by lumi options
    group_additional.add_option("--splitByLumi", action="store_true", dest="splitByLumi", default=False, help="will split CRAB jobs by lumi section")
    group_additional.add_option("--totalnumberlumis", dest="totalnumberlumis", type="int", default=-1, help="total number of lumis to be analyzed")
    group_additional.add_option("--lumisperjob", dest="lumisperjob", type="int", default=150, help="number of lumis per job")
    group_additional.add_option("--lumimask", dest="lumimask", help="lumi mask JSON file")
    parser.add_option_group(group_additional)
 
    (input, args) = parser.parse_args()

    allowedTypes = ('ttrig','vdrift','noise','t0','validation')
    input.workflowType = 'ttrig'
    if len(args) > 0: 
        if args[0] not in allowedTypes: parser.error('option "%s" not allowed' % args[0])
        input.workflowType = args[0]
 
    allowedTTrigModes = ('timeboxes','residuals','validation')
    allowedVDriftModes = ('segment','meantimer')
    input.workflowMode = None
    if input.workflowType == 'ttrig': input.workflowMode = 'residuals'
    elif input.workflowType == 'vdrift': input.workflowMode = 'segment'
    if len(args) > 1:
        if input.workflowType == 'ttrig' and args[1] not in allowedTTrigModes:
            parser.error('option "%s" not allowed' % args[1])
        if input.workflowType == 'vdrift' and args[1] not in allowedVDriftModes:
            parser.error('option "%s" not allowed' % args[1])
        input.workflowMode = args[1]  
    
    requiredFields = ('run','datasetpath','globaltag')
    for item in requiredFields:
        if not getattr(input,item):
            parser.error('field "%s" needs to be set' % item) 

    run = input.run
    runselection = None
    if hasattr(input,'runselection') and input.runselection: runselection = input.runselection
    else: runselection = run

    trial = None
    if hasattr(input,'trial') and input.trial: trial = input.trial
    else: trial = 1

    label = None
    if hasattr(input,'label') and input.label: label = input.label
    else: label = 'dtCalibration'

    if hasattr(input,'lumimask') and input.lumimask:
        if not os.path.exists(input.lumimask): parser.error('File "%s" does not exist' % input.lumimask)
 
    ############################################################################### 
    class config: pass

    config.trial = trial
    config.label = label
    config.datasetpath = input.datasetpath
    config.runselection = runselection
    if hasattr(input,'inputVDriftDB') and input.inputVDriftDB: config.inputVDriftDB = os.path.abspath(input.inputVDriftDB)
    if hasattr(input,'inputTTrigDB') and input.inputTTrigDB: config.inputTTrigDB = os.path.abspath(input.inputTTrigDB)

    config.runOnRAW = False 
    if hasattr(input,'runOnRAW') and input.runOnRAW: config.runOnRAW = input.runOnRAW
    config.runOnCosmics = False
    if hasattr(input,'runOnCosmics') and input.runOnCosmics: config.runOnCosmics = input.runOnCosmics

    config.globaltag = input.globaltag + '::All'
    config.digilabel = 'muonDTDigis'
    config.preselection = input.preselection 
    
    if not input.runOnGrid:
        config.scheduler = 'CAF'
        if input.stageOutLocal:
            config.stageOutCAF = False
            config.stageOutLocal = True
        else:
            config.stageOutCAF = True
            config.stageOutLocal = False
    else:
        config.runOnGrid = True
        config.scheduler = 'glite'
        config.stageOutCAF = False
        config.stageOutLocal = True

    config.useserver = input.useserver
    config.queueAtCAF = input.queueAtCAF
    #config.totalnumberevents = 1000000
    #config.eventsperjob = 50000
    if hasattr(input,'splitByLumi') and input.splitByLumi:
        config.splitByLumi = True
        config.totalnumberlumis = input.totalnumberlumis
        config.lumisperjob = input.lumisperjob
        if hasattr(input,'lumimask') and input.lumimask: config.lumimask = os.path.abspath(input.lumimask)
    else:
        config.splitByLumi = False 

    if hasattr(input,'email') and input.email: config.email = input.email    

    if config.stageOutCAF:
        """ 
        castorPath = '' 
        if not input.castorpath: castorPath = '/castor/cern.ch/cms/store/caf/user/' + os.environ['USER']
        else: castorPath = input.castorpath
        """  
        if not input.castorpath: parser.error('field "%s" needs to be set' % 'castorpath')
        print "Writing files at",input.castorpath
        config.castor_prefix = input.castorpath
        config.castorpath = input.castorpath

    #config.template_path = input.templatepath
    #config.templatepath =  input.templatepath
    config.jobsFinishedThreshold = input.jobsFinishedThreshold

    base_label = ''
    if input.workflowType == 'ttrig': base_label = 'Ttrig'
    elif input.workflowType == 'vdrift': base_label = 'VDrift'
    elif input.workflowType == 'noise': base_label = 'Noise'
    elif input.workflowType == 't0': base_label = 'T0'
    elif input.workflowType == 'validation': base_label = 'Valid'

    #base_dir = 'Run%s/Ttrig' % run
    base_dir = 'Run%s/%s' % (run,base_label)
    if not os.path.exists(base_dir): os.makedirs(base_dir)
    config.base_dir = base_dir

    run_dir = base_dir + '/Exec'
    if not os.path.exists(run_dir): os.makedirs(run_dir)
    config.run_dir = run_dir

    result_dir = base_dir + '/Results'
    if not os.path.exists(result_dir): os.makedirs(result_dir)
    config.result_dir = result_dir

    log_dir = base_dir + '/Log'
    if not os.path.exists(log_dir): os.makedirs(log_dir)
    config.log_dir = log_dir 

    """
    prod_dir = 'Run%s/Ttrig/Production' % run
    if not os.path.exists(prod_dir): os.makedirs(prod_dir)
    config.prod_dir = prod_dir
    valid_dir = 'Run%s/Ttrig/Validation' % run
    if not os.path.exists(valid_dir): os.makedirs(valid_dir)
    config.valid_dir = valid_dir
    """
    #logFileName = os.path.abspath('%s/Run_%s_v%s.log' % (log_dir,run,trial))
    #logOut = open(logFileName,'w',1)

    ###############################################################################
    start = time.time()
    print "DT Calibration starting for Run",run
    print "Using runs",runselection
    print "Running at",run_dir
    print "Results at",result_dir 
    #print "Log files at",logFileName
 
    #stdout_original = sys.stdout
    #sys.stdout = logOut

    from CalibMuon.DTCalibration.Workflow.crabWrap import initCrabEnvironment
    initCrabEnvironment()

    execute = True
    if input.no_exec: execute = False

    if input.workflowType == 'ttrig': runTtrigWorkflow(input.workflowMode,run,config,execute)
    elif input.workflowType == 'vdrift': runVDriftWorkflow(input.workflowMode,run,config,execute)
    elif input.workflowType == 'noise': runNoiseWorkflow('',run,config,execute)
    elif input.workflowType == 't0': runT0Workflow('',run,config,execute)
    elif input.workflowType == 'validation': runValidationWorkflow('',run,config,execute)

    #sys.stdout = stdout_original
 
    stop = time.time() 
    print "DT Calibration finished.. results in",result_dir
    print "Time elapsed was %.1f seconds"%(stop-start)
